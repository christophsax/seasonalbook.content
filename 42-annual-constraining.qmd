## Annual constraining {#sec-annual-constraining}

```{r}
#| results: "asis"
#| echo: false
source("_common.R")
status("polishing")  # drafting, polishing, complete
```

```{=html}
<!-- -   Should the annual values be restrained?

-   How to use the force spec
 -->
```

Seasonal adjustment may affect the annual values of a series.
The yearly total of an adjusted series usually differs from the total of an unadjusted series.
By applying variants of the Denton Method (@dagum1994, @denton1971), the adjustment procedure can be used to enforce the totals to be equal.
In seasonal, this can be performed with the option `force.type = "regress"`.


## Annual constraining

The yearly total of a seasonally adjusted series is usually not exactly equal to the yearly total of the original series.
There is no theoretical reason why the annual totals of the original series and the seasonally adjusted series should be the same.
For example, the number of trading days may differ in different years, and we would expect a trading day adjusted series to be different at the annual level.

Sometimes, however, may be useful to apply annual constraining.
The reason for this is usually to lower confusion for the end users.
To constrain the annual totals, X13 includes a version of the Denton method.
Let's start with a SEATS adjustment of `AirPassengers`:

```{r}
m <- seas(AirPassengers)
```

The [tsbox package](https://docs.ropensci.org/tsbox/) can be used to compute annual totals.
As for `AirPassengers`, the annual total is the sum of the monthly values, but it sometimes makes sense to use `"mean"` as an aggregation function:

```{r}
library(tsbox)
ts_frequency(final(seas(AirPassengers)), aggregate = "sum")
ts_frequency(AirPassengers, aggregate = "sum")
```

As we can see, there are minor differences between the series.
However, in this case, the differences are rather small, and at most as large as half a percentage point:

```{r}
100 * (ts_frequency(final(seas(AirPassengers)), aggregate = "sum") /
ts_frequency(AirPassengers, aggregate = "sum") - 1)
```

By applying `force.type = "regress"`, we constrain the annual values to be the same:

```{r}
ts_frequency(final(seas(AirPassengers, force.type = "regress")), aggregate = "sum")
ts_frequency(AirPassengers, aggregate = "sum")
```

## Should annual values be constrained?

As previously discussed, there isn't a theoretical justification for enforcing annual constraints.
Implementing annual constraints ensures consistency in annual values across both seasonally adjusted and unadjusted series, which can reduce confusion and possibly enhance user satisfaction.

Here are some guidelines (loosly based on @ONS07, 8.2.2) on deciding whether to apply annual constraints:

Usage
: Most importantly, consider how the data is used, and what is expected by users. For examples, if the data are integrated into the National Accounts, they likely require constraining to align with other datasets.


Conceptual Appropriateness
: Assess if annual constraints are conceptually relevant for your dataset. If, for example, you data is a price index, annual constaining is not appropriate.


Consistency
: For series already undergoing seasonal adjustment, a strong justification is needed to alter the constraining approach. Avoid frequently toggling the use of annual constraints to maintain methodological consistency.

Impact Analysis
: Examine the differences (or ratios, if using a multiplicative model) between the constrained and unconstrained series in their final forms. If these differences are minor and other considerations support constraining, applying annual constraints may be the more suitable option.

