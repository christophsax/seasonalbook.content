[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Seasonal Adjustment in R",
    "section": "",
    "text": "Welcome\nThis is the website for the work-in-progress edition of Seasonal Adjustment in R, an online Book by James Livsey and Christoph Sax."
  },
  {
    "objectID": "index.html#about-the-book",
    "href": "index.html#about-the-book",
    "title": "Seasonal Adjustment in R",
    "section": "About the book",
    "text": "About the book\nThis book will teach you how to do seasonal adjustment in R, using X13-ARIMA-SEATS.\nSpecifically, the audience will be both R users who want to learn about seasonal adjustment as well as seasonal adjustment practitioners, who are interested in using R. The book will be tailored to the practical applications of seasonal adjustment within R. It presents background material and references for the theoretically minded reader. The main focus, however, is on concrete problems and examples.\nWe will showcase methods through detailed examples with associated code. This presentation allows the academic level to be quite broad; understood by undergraduates all the way through advanced Ph.D. students."
  },
  {
    "objectID": "index.html#key-features-of-the-book",
    "href": "index.html#key-features-of-the-book",
    "title": "Seasonal Adjustment in R",
    "section": "Key features of the book",
    "text": "Key features of the book\n\nEach chapter include a concrete practical problem and shows how X-13 can be used to address it\nTeach-by-example format\nContinuous connection of X-13ARIMA-SEATS input with R input and vice-versa\nFundamental theoretical material is referenced throughout (mainly as an option)\nFor each example given the book will give answers, code and provide data"
  },
  {
    "objectID": "10-introduction.html#seasonal-adjustment",
    "href": "10-introduction.html#seasonal-adjustment",
    "title": "1  Introduction",
    "section": "Seasonal Adjustment",
    "text": "Seasonal Adjustment\nMany time series exhibit a regular seasonal pattern over the year. US unemployment, for example, is usually higher from January to March and again in June and July. Similarly, retail sales tend to peak during the Christmas season. This seasonal behavior is regular and predictable. The goal of seasonal adjustment is to estimate and remove the seasonal component from a time series.\nWhy do we want to do this? Seasonal data is usually hard to interpret. For example, if we want to learn from the US unemployment rate if the economy is moving out of a recession during certain months, we want the labor market data to be free from seasonal effects."
  },
  {
    "objectID": "10-introduction.html#x-13arima-seats",
    "href": "10-introduction.html#x-13arima-seats",
    "title": "1  Introduction",
    "section": "X-13ARIMA-SEATS",
    "text": "X-13ARIMA-SEATS\nFundamentally, seasonal adjustment decomposes a time series into a trend, a seasonal, and an irregular component and removes the seasonal component from the data. There are many ways to perform this decomposition. This book focuses on a particular one, X-13ARIMA-SEATS (X-13, for short), the seasonal adjustment software developed by the United States Census Bureau. X-13 offers an elaborate toolkit to perform the most advanced seasonal adjustment."
  },
  {
    "objectID": "10-introduction.html#r",
    "href": "10-introduction.html#r",
    "title": "1  Introduction",
    "section": "R",
    "text": "R\nThis book will teach you how to use X-13 in R through the seasonal package, which offers access to all features of X-13 with a usually much simpler syntax. The required X-13 binaries are provided by the x13binary package and automatically included in seasonal. The next chapter provides a minimal example to get you started in less than five minutes."
  },
  {
    "objectID": "10-introduction.html#target-audience",
    "href": "10-introduction.html#target-audience",
    "title": "1  Introduction",
    "section": "Target audience",
    "text": "Target audience\nWe write this book for two primary audiences: The first focus is on current practitioners of seasonal adjustment who are interested in learning how to implement in R. This audience includes researchers from statistical agencies who want to use features of R to evaluate the properties of their seasonal adjustments.\nThe second focus is on current R users who want to learn seasonal adjustment. We are able to leverage the reader’s knowledge of R to make learning seasonal adjustment easier. We will feature exciting applications outside official statistics, such as the seasonal adjustment of business data.\nThe book tries to be as practical as possible. It usually starts with a practical problem and shows how to solve it in a cookbook style. Formal derivations are usually avoided. Each chapter ends with a case study that discusses a real-life example of the topic."
  },
  {
    "objectID": "10-introduction.html#history-of-x-13",
    "href": "10-introduction.html#history-of-x-13",
    "title": "1  Introduction",
    "section": "History of X-13",
    "text": "History of X-13\nIn official statistics, seasonal adjustment has a long tradition. The US Census Bureau developed the original X-11 software in the 1960s, Statistics Canada (Dagum 1980) continued the development afterward. The following software packages by the US Census Bureau were called X-12-ARIMA (Findley et al. 1998) and X-13ARIMA-SEATS (or X-13, for short) (Monsell 2007). X-11 is still used as a name for filter-based seasonal adjustment methods within X-13. Meanwhile, TRAMO-SEATS, developed by the Bank of Spain (Caporello, Maravall, and Sánchez 2001), offers an alternative model-based approach to seasonal adjustment.\nIn its most recent version, X-13 offers these two seasonal adjustment methods in a single command-line tool written in Fortran. The National Bank of Belgium has created an alternative Java-based implementation called JDemetra+ (National Bank of Belgium, Deutsche Bundesbank, Eurostat 2017), also widely deployed by statistical agencies."
  },
  {
    "objectID": "10-introduction.html#acknowledgements",
    "href": "10-introduction.html#acknowledgements",
    "title": "1  Introduction",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nWe are indebted to the United States Census Bureau for X-13ARIMA-SEATS and support for research around the software. Help and support by Brian Monsell are especially acknowledged.\nseasonal was originally developed for use at the Swiss State Secretariat of Economic Affairs. It has been dramatically improved thanks to suggestions and support from Matthias Bannert, Freya Beamish, Vidur Dhanda, Alain Galli, Ronald Indergand, Preetha Kalambaden, Stefan Leist, James Livsey, Pinaki Mukherjee, Bruno Parnisari and many others. The related work on the x13binary package facilitated (automated) deployment thanks to the R package system, CRAN, and GitHub for the x13prebuilt repository."
  },
  {
    "objectID": "10-introduction.html#references",
    "href": "10-introduction.html#references",
    "title": "1  Introduction",
    "section": "References",
    "text": "References\n\n\n\n\nCaporello, Gianluca, Agustin Maravall, and Fernando J Sánchez. 2001. “Program TSW Reference Manual.” 0112. Banco de España Madrid. https://ideas.repec.org/p/bde/wpaper/0112.html.\n\n\nDagum, Estela Bee. 1980. The x-11-ARIMA Seasonal Adjustment Method. Statistics Canada, Seasonal Adjustment; Time Series Staff.\n\n\nFindley, David F, Brian C Monsell, William R Bell, Mark C Otto, and Bor-Chung Chen. 1998. “New Capabilities and Methods of the x-12-ARIMA Seasonal-Adjustment Program.” Journal of Business & Economic Statistics 16 (2): 127–52.\n\n\nMonsell, B. 2007. “The x-13A-s Seasonal Adjustment Program.” In Proceedings of the 2007 Federal Committee on Statistical Methodology Research Conference. http://www.fcsm.gov/07papers/Monsell.II-B.pdf.\n\n\nNational Bank of Belgium, Deutsche Bundesbank, Eurostat. 2017. JDemetra+: Econometric Software for Seasonal Adjustment and Other Time Series Methods. Eurostat. https://ec.europa.eu/eurostat/cros/content/download."
  },
  {
    "objectID": "11-getting-started.html#installation",
    "href": "11-getting-started.html#installation",
    "title": "2  Getting started",
    "section": "2.1 Installation",
    "text": "2.1 Installation\nIf you use R, installing X-13ARIMA-SEATS from CRAN is as easy as installing any other R package (Sax and Eddelbuettel 2018):\ninstall.packages(\"seasonal\")"
  },
  {
    "objectID": "11-getting-started.html#sec-a-minimal-example",
    "href": "11-getting-started.html#sec-a-minimal-example",
    "title": "2  Getting started",
    "section": "2.2 A minimal example",
    "text": "2.2 A minimal example\nOnce the package is installed, you can load it in the usual way:\n\nlibrary(seasonal)\n\nThe seas() function provides the core functionality of the package. By default, seas calls the automatic procedures of X-13 to perform a seasonal adjustment that works well in most circumstances:\n\nseas(AirPassengers)\n#> \n#> Call:\n#> seas(x = AirPassengers)\n#> \n#> Coefficients:\n#>           Weekday          Easter[1]         AO1951.May  MA-Nonseasonal-01  \n#>          -0.00295            0.01777            0.10016            0.11562  \n#>    MA-Seasonal-12  \n#>           0.49736\n\nThe first argument of seas is a time series of class ts. ts objects are frequently used in base R and are useful to store monthly, quarterly, or annual data. The AirPassengers example series is included in base R and shows monthly totals of international airline passengers from 1949 to 1960. seas() returns a seas object that contains the necessary information on the adjustment performed on this time series; we can assign it to a variable:\n\nm <- seas(AirPassengers)\n\nThere are several functions and methods for \"seas\" objects. The final function returns the adjusted series. The plot method shows a plot with the unadjusted and the adjusted series.\n\nplot(m)\n\n\n\n\nAs you can see, the adjusted series is much less volatile than the original one because the seasonal component was removed from the original series. But the adjusted series is not entirely smooth, too, because it still contains the irregular component.\nThis constitutes a crucial point about seasonal adjustment: It only removes regular, predictable movements, not irregular ones. In the adjusted series, we can see a decrease in airline passengers in 1953 and between 1957 and 1958. These decreases were impossible to discover in the original series.\nThe summary method displays an overview of the model, very similar to the one produced by R’s lm function:\n\nsummary(m)\n#> \n#> Call:\n#> seas(x = AirPassengers)\n#> \n#> Coefficients:\n#>                     Estimate Std. Error z value Pr(>|z|)    \n#> Weekday           -0.0029497  0.0005232  -5.638 1.72e-08 ***\n#> Easter[1]          0.0177674  0.0071580   2.482   0.0131 *  \n#> AO1951.May         0.1001558  0.0204387   4.900 9.57e-07 ***\n#> MA-Nonseasonal-01  0.1156204  0.0858588   1.347   0.1781    \n#> MA-Seasonal-12     0.4973600  0.0774677   6.420 1.36e-10 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 144  Transform: log\n#> AICc: 947.3, BIC: 963.9  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 26.65   Shapiro (normality): 0.9908\n\nThe summary gives an overview of the adjustment model and provides diagnostics. This book will help you do understand it in more detail. The following section discusses some of the elements and relates them to the chapters in this book."
  },
  {
    "objectID": "11-getting-started.html#where-to-go-from-here",
    "href": "11-getting-started.html#where-to-go-from-here",
    "title": "2  Getting started",
    "section": "2.3 Where to go from here",
    "text": "2.3 Where to go from here\nseas(AirPassengers) produces a good seasonal adjustment of the airline passengers time series. If you are very new to seasonal adjustment, the automated routines of X-13 and seasonal produce an adjustment that works well in most circumstances.\nThe command seas(AirPassengers) has invoked a large number of specs of X-13. spec is X-13 slang for a module within the software. X-13 is built on top of twenty specs that perform various subtasks of seasonal adjustment. Some specs are required most of the time (e.g., regression), while others are optional (e.g., seats) or purely technical (e.g., spans shortens the time series in use). Chapter 4 discusses the available specs in more detail.\nThis book teaches you how to use and fine-tune the individual specs and deal with concrete data problems.\n\n2.3.1 Fundamentals\nSpecifically, the command seas(unemp) has invoked the following fundamental specs – they are involved in most adjustments and are covered in the first part of the book:\n\nTransform\n\nA decision on initial transformation was made. The automated procedures concluded that a log transformation was made and a multiplicative seasonal adjustment model, rather than an additive model, was estimated. Chapter 5 discusses the choices. Since transform is a relatively simple spec, it is a good starting point to familiarize yourself with the spec idea.\n\nRegression\n\nAn automated model search concluded that AirPassengers is best modeled by an (0 1 1)(0 1 1) ARIMA model. Chapter 6 explains what that means and how such a model structure is determined and estimated.\n\nSEATS / X11\n\nSeasonal decomposition is performed by SEATS. SEATS is one of the two options for decomposing a series and is discussed in more detail in Chapter 7. The alternative, X11, is discussed in Chapter 8.\n\n\n\n\n2.3.2 Data issues\nThe command seas(AirPassengers) has also dealt with various data issues, which are covered in the second part of the book:\n\nHoliday\n\nSignificant Easter effects have been found in AirPassengers and were removed from the adjusted series. Moving holidays like Easter or Chinese New Year are vital in seasonal adjustment since they may significantly impact the behavior of many time series. For AirPassengers, the number of passengers is higher in months with Easter. Moving holiday effects will be discussed in Chapter 9.\n\nWeekday\n\nNot every month has the same number of weekdays. Since many activities (such as air traveling) differ between weekends and weekdays, this constitutes another predictable component. In AirPassengers, there are fewer passengers on a weekday than during a weekend, and the automated procedures decided to remove the effect. These effects are discussed in Chapter 10.\n\nOutliers\n\nCertain data points may be well out of the ordinary. These outliers are a problem for the modeling and adjustment process. An automated procedure scanned the series for outliers and found an additive outlier on May 1951. This outlier is shown in the plot above, too. Outliers are discussed in Chapter 11.\n\nSeasonal Breaks\n\nThe seasonal pattern in AirPassengers looks relatively stable. Some time series, however, show abrupt changes in the seasonal pattern. Chapter 12 discusses them and shows how to deal with seasonal breaks.\n\n\n\n\n2.3.3 Additional issues\nThe third part of the book deals with additional issues:\n\nPresence of seasonality\n\nWhile the presence of seasonality in AirPassengers is prominent, this is not always the case. If a series has no seasonal pattern, there is no need for a seasonal adjustment. If it is adjusted anyway, the process adds noise to the series and should be avoided. Chapter 13 shows how seasonality can be detected and how to decide whether an adjustment should be made or not.\n\nAnnual constraining\n\nUsually, a seasonal adjustment may affect the annual values of a time series. In part, this is by design. The number of weekdays may differ between years, so the adjusted annual values may be different too. In part, this may be an artifact of the adjustment process. X-13 offers tools to enforce the annual values of the adjusted series to be the same as the original one. Chapter 14 shows how to constrain annual value and whether it is a good idea.\n\nIndirect vs. direct adjustment\n\nOften, a seasonal adjustment may be performed on individual series or on an aggregate of multiple series. X-13 offers tools that let you compare these two possibilities. Chapter 15 discusses the options and helps you to decide which one is better.\n\n\n\n\n2.3.4 Quality assessment\nAdjusting a series with the automated procedure is straightforward. But is the resulting series a reasonable adjustment? The fourth part helps you to decide between competing seasonal adjustment models.\n\nQuality measures\n\nIn the lower part, the summary of the adjustment model shows various quality measures: The AICc and BIC information criterion and the QS, the Box-Ljung, and the Shapiro statistic. None of them shows any significance (indicated by one or several stars), which is a good sign. Various quality measures and their interpretation is shown in Chapter 16.\n\nRevisions\n\nWhen comparing seasonal adjustment models, the stability of the model and the series is often an important consideration. One does not want to get a different series with a new data point. X-13 offers tools to analyze revisions. Chapter 17 discusses them and helps you to decide which model to pick."
  },
  {
    "objectID": "11-getting-started.html#references",
    "href": "11-getting-started.html#references",
    "title": "2  Getting started",
    "section": "2.4 References",
    "text": "2.4 References\n\n\n\n\nSax, Christoph, and Dirk Eddelbuettel. 2018. “Seasonal Adjustment by X-13ARIMA-SEATS in R.” Journal of Statistical Software 87 (11): 1–17. https://doi.org/10.18637/jss.v087.i11."
  },
  {
    "objectID": "12-how-to-use.html#overview-of-the-book",
    "href": "12-how-to-use.html#overview-of-the-book",
    "title": "3  How to use the book",
    "section": "3.1 Overview of the book",
    "text": "3.1 Overview of the book"
  },
  {
    "objectID": "12-how-to-use.html#the-seasonalbook-package",
    "href": "12-how-to-use.html#the-seasonalbook-package",
    "title": "3  How to use the book",
    "section": "3.2 The seasonalbook package",
    "text": "3.2 The seasonalbook package\nAn R package that supplements “Seasonal Adjustment in R”, and contains all data and examples.\nTo install:\nremotes::install_github(\"christophsax/seasonalbook\")\nExample series:\n\nlibrary(seasonalbook)\nplot(grocery)\n\n\n\n\nSome Examples: Chinese New Year, structural breaks, direct or indirect seasonal adjustment, SEATS or X-11."
  },
  {
    "objectID": "20-part-basics.html",
    "href": "20-part-basics.html",
    "title": "Basics",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\nThis section gets readers familiar with X-13ARIMA-SEATS. It begins by explaining the history and pedagogy of the software (Chapter 4). This leads directly into discussing the principal elements of X-13ARIMA-SEATS."
  },
  {
    "objectID": "21-overview.html#main-specs",
    "href": "21-overview.html#main-specs",
    "title": "4  The fundamentals of X-13",
    "section": "4.1 Main specs",
    "text": "4.1 Main specs\nSome specs, like the transform and the regression spec, are used in most seasonal adjustment processes. Others fulfill a particular function and are used only occasionally. For example, the history spec allows an analysis of the revision history and is only called for diagnostical purposes. Other specs are mutually exclusive. You can choose x11 or seats to decompose a time series, but not both. Table 4.1 lists the main specs of X-13 and describes what they do.\n\n\nTable 4.1: Important specs that are used in most seasonal adjustment models\n\n\n\n\n\n\n\nSpec name\nWhat it does\nChapter\n\n\n\n\nestimate\nEstimates the regARIMA model specified by the regression and arima specs.\nChapter 6\n\n\narima\nSpecifies the ARIMA part of the regARIMA model.\nChapter 6\n\n\nregression\nSpecification for including regression variables in a regARIMA model.\nChapter 6, Chapter 9, Chapter 10\n\n\nautomdl\nSpecifies the ARIMA part of the regARIMA model using an automatic procedure.\nChapter 6\n\n\noutlier\nSpecification to perform automatic detection of additive (point) outliers.\nChapter 11\n\n\nseats\nInvoke the production of model-based signal extraction using SEATS. Default in the R seasonal package.\nChapter 7\n\n\nx11\nAn optional spec for invoking seasonal adjustment by the X-11 methodology.\nChapter 8\n\n\nforecast\nSpecification to forecast and/or backcast the time series given in the series spec using the estimated model.\nChapter 6"
  },
  {
    "objectID": "21-overview.html#interactions-between-specs",
    "href": "21-overview.html#interactions-between-specs",
    "title": "4  The fundamentals of X-13",
    "section": "4.2 Interactions between specs",
    "text": "4.2 Interactions between specs\nX-13 specs interact with each other. For example, once a series is transformed, it is usually passed to the regression and arima specs, which estimate a regARIMA model. To come up with a good model, it uses the automdl spec to determine a good ARIMA model automatically. To correct outlier values, it collaborates with the outlier spec. Once the series is modeled, it is decomposed either by the seats or the x11 spec. Figure 4.1 shows the interaction between the main specs in a typical seasonal adjustment run.\n\n\n\n\n\n\nflowchart LR\n    A(  transform  )-->regARIMA\n    subgraph regARIMA\n    direction LR\n    B(estimate)<-->D(regression)\n    B<-->C(automdl)\n    B<-->E(arima)\n    end\n    regARIMA --> F(seats)\n    regARIMA --> G(x11)\n\n\n\n\n\nFigure 4.1: Interactions between X-13 specs."
  },
  {
    "objectID": "21-overview.html#specs-arguments",
    "href": "21-overview.html#specs-arguments",
    "title": "4  The fundamentals of X-13",
    "section": "4.3 Specs Arguments",
    "text": "4.3 Specs Arguments\nWithin specs, there are arguments. Spec arguments guide the behavior of the spec. For example, the function argument in the transform spec can be set to \"auto\", \"none\", \"log\", \"sqrt\", \"inverse\" or \"logistic“. The default is set to \"auto\", which causes an automated model evaluation between \"log\" and \"none\". There are many other arguments, and the X-13 Manual (US Census Bureau 2017) is the canonical reference. This book will list and explain the frequently used arguments while skipping some of the more exotic ones."
  },
  {
    "objectID": "21-overview.html#addressing-specs-from-r",
    "href": "21-overview.html#addressing-specs-from-r",
    "title": "4  The fundamentals of X-13",
    "section": "4.4 Addressing specs from R",
    "text": "4.4 Addressing specs from R\nIn the R package seasonal, spec argument combinations can be directly fed to the seas() function. For example, to turn off the log transformation in the AirPassengers example from Section 2.2, we can specify the following:\n\nm_no_log <- seas(AirPassengers, transform.function = \"none\")\nsummary(m_no_log)\n#> \n#> Call:\n#> seas(x = AirPassengers, transform.function = \"none\")\n#> \n#> Coefficients:\n#>                   Estimate Std. Error z value Pr(>|z|)    \n#> Constant          30.62077    4.60956   6.643 3.08e-11 ***\n#> Leap Year         11.32104    3.43088   3.300 0.000968 ***\n#> Weekday           -0.90361    0.17787  -5.080 3.77e-07 ***\n#> Easter[1]          6.89372    1.80972   3.809 0.000139 ***\n#> AR-Nonseasonal-01  0.81929    0.04903  16.709  < 2e-16 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (1 0 0)(0 1 0)  Obs.: 144  Transform: none\n#> AICc: 993.4, BIC:  1010  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.):  29.2   Shapiro (normality): 0.984\n\nAs you can see from the lower part of the summary, transform is now set equal to none. Note that the change in the transform argument has also affected the other specs. The ARIMA model is different now, and a leap-year adjustment is performed. We will discuss the working of the transform spec in more detail in the next chapter."
  },
  {
    "objectID": "21-overview.html#less-frequently-used-specs",
    "href": "21-overview.html#less-frequently-used-specs",
    "title": "4  The fundamentals of X-13",
    "section": "4.5 Less frequently used specs",
    "text": "4.5 Less frequently used specs\nWhile the main specs appear in most seasonal adjustment processes, other specs are less often used. Some of them have a diagnostic purpose. The spectrum spec, for example, draws and analyses the spectrum of a time series, similar to the R base function spectrum(). Other specs are more elaborate. For example, the history spec produces a sequence of runs from a sequence of truncated versions of the time series and allows the analysis of potential revisions. The slidingspans spec models various parts of the time series and has a similar purpose as history. All diagnostics specs are listed in Table 4.3.\n\n\nTable 4.2: Diagnostic specs\n\n\n\n\n\n\n\nSpec name\nWhat it does\nChapter\n\n\n\n\nhistory\nRequesting a sequence of runs from a sequence of truncated versions of the time series for the purpose of creating historical records.\nChapter 17\n\n\nslidingspans\nProviding sliding spans stability analysis.\nChapter 17\n\n\nidentify\nProduce tables and line printer plots of sample ACFs and PACFs.\n\n\n\nspectrum\nProvides a choice between two spectrum diagnostics to detect seasonality or trading day effects.\n\n\n\ncheck\nProduce statistics for diagnostic checking of residuals from the estimated model.\n\n\n\n\n\nThe force and the composite spec are special-purpose specs. The former enforces the yearly totals of the seasonally adjusted series to be equal to those of the original series. The latter allows a comparison of indirect and direct seasonal adjustments. Table 4.3 gives an overview of the special-purpose specs.\n\n\nTable 4.3: Special purpose specs\n\n\n\n\n\n\n\nSpec name\nWhat it does\n\n\n\n\n\nforce\nAllow users to force yearly totals of the seasonally adjusted series to equal those of the original series for convenience.\nChapter 14\n\n\ncomposite\nObtaining both indirect and direct adjustments of a composite series.\nChapter 15\n\n\n\n\nFinally, a few specs are not covered in this book. Some of them are vintage specs that were important in earlier versions of X-13 but were superseded by other specs. It is generally recommended to use regression instead of x11regression and automdl instead of pickmdl. Other specs have a purely technical purpose. For example, the series spec provides X-13 with the data, starting date, and frequency. In R, this is handled by seasonal and will not be covered.\n\n\nTable 4.4: Vintage and technical specs that won’t be covered in this book)\n\n\n\n\n\n\nSpec name\nWhat it does\n\n\n\n\nx11regression\nAlternative to regression. Can only be used with X11.\n\n\npickmdl\nAlternative to automdl. Can only be used with X11.\n\n\nseries\nProvides X-13 with the data, the starting date and the frequency. In R, this is handled by seasonal and will not be covered.\n\n\nmetadata\nSpecification that allows users to insert metadata into the diagnostic summary file. In R, this is handled by seasonal and will not be covered."
  },
  {
    "objectID": "21-overview.html#main-user-choices",
    "href": "21-overview.html#main-user-choices",
    "title": "4  The fundamentals of X-13",
    "section": "4.6 Main user choices",
    "text": "4.6 Main user choices\nWhile we will cover each spec in more detail, this section provides a few examples of frequent user choices. As we saw in the previous chapter, by default, seasonal uses defaults that work well in many circumstances. The following is a non-exhaustive list of deviations from the defaults. The default options of seas() are listed as explicit arguments and are discussed in the arguments section of the help page of\n\n4.6.1 Using X11\nWhile seas() calls SEATS by default, X11 is often easier to use. To perform a seasonal adjustment on AirPassengers with X11, we need to activate the x11 spec.\n\nm_x11 <- seas(AirPassengers, x11 = \"\")\n\nAn empty string \"\" tells seas() to use the spec without an argument. Alternatively, you can also use an empty list, list(). If more than one mutually exclusive spec is included in seas(), specs are overwritten according to the priority rules shown in Table 4.5\n\n\nTable 4.5: If more than one mutually exclusive spec is included, specs are overwritten according to priority rules.\n\n\n\n\n\n\nProcedure\nPriority rules\n\n\n\n\nModel selection\n\narima\npickmdl\nautomdl\n\n\n\nAdjustment procedure\n\nx11\nseats\n\n\n\n\n\nThis is why the default SEATS procedure in the introductory example was overwritten by the specification of x11 = \"\".\n\n\n4.6.2 Turning off auto modeling\nBy default, the automdl spec finds a good ARIMA model. By specifying the model argument of the arima spec, the automated modeling is deactivated. Instead of the automatically chosen (0 1 1)0 1 1) ARIMA model, the following estimates an (1 1 0)1 1 0) model.\n\nm_arima <- seas(AirPassengers, arima.model = c(1, 1, 0, 1, 1, 0))\nsummary(m_arima)\n#> \n#> Call:\n#> seas(x = AirPassengers, arima.model = c(1, 1, 0, 1, 1, 0))\n#> \n#> Coefficients:\n#>                     Estimate Std. Error z value Pr(>|z|)    \n#> Weekday           -0.0029124  0.0004794  -6.076 1.23e-09 ***\n#> Easter[1]          0.0167907  0.0067080   2.503   0.0123 *  \n#> AO1951.May         0.0950587  0.0194363   4.891 1.00e-06 ***\n#> AR-Nonseasonal-01 -0.1078564  0.0871940  -1.237   0.2161    \n#> AR-Seasonal-12    -0.4588948  0.0790634  -5.804 6.47e-09 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (1 1 0)(1 1 0)  Obs.: 144  Transform: log\n#> AICc: 951.6, BIC: 968.1  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 35.88 . Shapiro (normality): 0.9937\n\n\n\n4.6.3 Turning off AIC testing and Outlier detection\nBy default, seas() evaluates the presence of weekday and Easter effects and checks for outliers in the data. Both can be turned off:\n\nm_no_auto <- seas(AirPassengers, regression.aictest = NULL, outlier = NULL)\nsummary(m_no_auto)\n#> \n#> Call:\n#> seas(x = AirPassengers, regression.aictest = NULL, outlier = NULL)\n#> \n#> Coefficients:\n#>                   Estimate Std. Error z value Pr(>|z|)    \n#> MA-Nonseasonal-01  0.40181    0.07887   5.095  3.5e-07 ***\n#> MA-Seasonal-12     0.55695    0.07626   7.304  2.8e-13 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 144  Transform: log\n#> AICc: 987.4, BIC: 995.8  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 28.04   Shapiro (normality): 0.9886  \n#> Messages generated by X-13:\n#> Warnings:\n#> - At least one visually significant trading day peak has been\n#>   found in one or more of the estimated spectra.\n\nIn practice, many spec argument combinations can be extracted via the static() functions, which will be demonstrated in the next chapter. Alternatively, the seasonalview package offers a graphical user interface that allows you to click various spec argument combinations.\nm <- seas(AirPassengers)\nview(m)\n\n\n\nManipulating spec argument combinations in the seasonalview graphical user interface"
  },
  {
    "objectID": "21-overview.html#references",
    "href": "21-overview.html#references",
    "title": "4  The fundamentals of X-13",
    "section": "4.7 References",
    "text": "4.7 References\n\n\n\n\nUS Census Bureau. 2017. X-13ARIMA-SEATS Reference Manual. Version 1.1. Washington, DC, USA: Time Series Research Staff, Center for Statistical Research; Methodology, US Census Bureau. http://www.census.gov/ts/x13as/docX13ASHTML.pdf."
  },
  {
    "objectID": "22-transform.html#multiplicative-or-additive-adjustment",
    "href": "22-transform.html#multiplicative-or-additive-adjustment",
    "title": "5  Transform",
    "section": "5.1 Multiplicative or additive adjustment?",
    "text": "5.1 Multiplicative or additive adjustment?\nX-13A-S has a built in statistical test to decide between log and no transformation. This is done with an information criteria based statistical test. The choice is made by comparing the AICC value CITE of an Airline model fit, or user specified ARIMA model, to the log transformed series and the original series. For all practical purposes this is an effective choice and can be left to the program to decide. Note, if your series has negative values it can not be log transformed and no transform is automatically selected by X-13 when automatic transformation is asked for. Other restrictions on the allowed transformations exist and can be found in CITE but these situations are rare. We can see the results of the transformation tests by looking at specific inputs to the UDG file.\n\nlibrary(seasonal)\nm <- seas(AirPassengers)\nudg(m, c(\"aictest.trans.aicc.nolog\", \"aictest.trans.aicc.log\"))\n#> aictest.trans.aicc.nolog   aictest.trans.aicc.log \n#>                1021.1919                 987.3845\n\nWe see the AICC for log transformation is lower and hence selected. The summary of the seasonal object summary(m) tells us this with Transform: log displayed. The automatically selected transformation can also be found in many other places such as the HTML output with out(m) or the udg with agruement name aictrans such as udg(m, \"aictrans\").\nThe choice between log and none changes the type of seasonal decomposition that will occur and hence your interpretation of the seasonal factors. With no transformation, X13 will do an additive seasonal adjustment \\[X_t = T_t + S_t + I_t.\\] If a long transformation is selected, X13 will do a multiplicative adjustment \\[X_t = T_t \\cdot S_t \\cdot I_t.\\] This is major difference here is the way seasonal factors are interpreted and applied to the observed data to remove seasonality. For additive models the seasonal factor is subtracted from the original \\(X_t - S_t\\). For example, an observed value of 100 with seasonal factor of 3.2 would result in a seasonally adjusted value of \\(100 - 3.2 = 96.8\\). For multiplicative models the observed data is divided by the seasonal factor \\(\\frac{X_t}{S_t}\\). For example, an observed value of 100 with seasonal factor of 1.08 would result in a seasonally adjusted value of \\(100 / 1.08 = 92.59259\\). Hence for multiplicative models values of \\(S_t>1\\), decrease the observed value and \\(S_t < 1\\) increase it."
  },
  {
    "objectID": "22-transform.html#transform-options",
    "href": "22-transform.html#transform-options",
    "title": "5  Transform",
    "section": "5.2 Transform options",
    "text": "5.2 Transform options\nThe transform spec controls these options. Some primary options within this spec are\n\n\n\n\n\n\n\n\n\nSpec option\nUse\nExample values\ndefault\n\n\n\n\nfunction\nspecify transform\nnone, log, auto\nnone\n\n\ndata or file\nspecify prior adjustment factor\n(1.2, 1.1, …, .99)\n(1,1,…,1)\n\n\naicdiff\nadjust tolerance of AIC test for log transform\n0.0 3.0 -4.5\n-2.0\n\n\n\nCase Study: AirPassengers series\nWe have seen the AirPassengers already it displays all classic signs of requiring a logarithmic transform such as heteroskadasticity. Lets verify that the automatic transformation identifies this.\n\nlibrary(seasonal)\nm <- seas(AirPassengers)\ntransformfunction(m)\n#> [1] \"log\"\n\nThis is also a good place to get our first look at some of the seasonal factors for an additive vs multiplicative model. MAYBE THIS ISN’T NEEDED BUT SHOULD IT GO SOMEWHERE?\n\nm <- seas(AirPassengers, \n          x11.save = \"d10\")\nseries(m, \"d10\")\n#>            Jan       Feb       Mar       Apr       May       Jun       Jul\n#> 1949 0.9093501 0.9560733 1.0670278 0.9916014 0.9377385 1.0715533 1.1731982\n#> 1950 0.9136266 0.9519196 1.0645758 0.9885785 0.9404015 1.0738183 1.1763318\n#> 1951 0.9181350 0.9402462 1.0591588 0.9849247 0.9494816 1.0762172 1.1820914\n#> 1952 0.9178187 0.9244165 1.0487533 0.9789956 0.9617100 1.0843759 1.1934278\n#> 1953 0.9126528 0.9048627 1.0373587 0.9766909 0.9729505 1.0927213 1.2110223\n#> 1954 0.9083085 0.8888004 1.0207379 0.9743433 0.9768056 1.1065925 1.2317284\n#> 1955 0.9087062 0.8757325 1.0043746 0.9725088 0.9770710 1.1177389 1.2477641\n#> 1956 0.9113013 0.8659370 0.9873154 0.9691911 0.9752633 1.1273595 1.2596273\n#> 1957 0.9114611 0.8588633 0.9768927 0.9650312 0.9747976 1.1294070 1.2695984\n#> 1958 0.9084144 0.8525407 0.9683350 0.9639122 0.9748032 1.1291752 1.2797863\n#> 1959 0.9043878 0.8477749 0.9633818 0.9644752 0.9787849 1.1263997 1.2848895\n#> 1960 0.9011260 0.8434822 0.9590288 0.9667206 0.9824233 1.1263562 1.2860095\n#>            Aug       Sep       Oct       Nov       Dec\n#> 1949 1.1842446 1.0717143 0.9140443 0.8142058 0.9084731\n#> 1950 1.1861763 1.0665339 0.9182399 0.8144992 0.9083218\n#> 1951 1.1894889 1.0593780 0.9264652 0.8139978 0.9088164\n#> 1952 1.1948580 1.0551788 0.9307751 0.8114694 0.9097599\n#> 1953 1.1983357 1.0575629 0.9301480 0.8076418 0.9089482\n#> 1954 1.2052499 1.0611817 0.9236323 0.8049894 0.9044422\n#> 1955 1.2155806 1.0644475 0.9206337 0.8025481 0.8989270\n#> 1956 1.2312896 1.0627407 0.9228904 0.8015067 0.8905124\n#> 1957 1.2461642 1.0627919 0.9269924 0.7997925 0.8845432\n#> 1958 1.2584607 1.0606187 0.9307681 0.7989765 0.8786255\n#> 1959 1.2666368 1.0603875 0.9304087 0.7992817 0.8774888\n#> 1960 1.2707454 1.0587151 0.9307559 0.7995418 0.8769706\nm <- seas(AirPassengers, \n          transform.function = \"none\", \n          x11.save = \"d10\")\nseries(m, \"d10\")\n#>              Jan         Feb         Mar         Apr         May         Jun\n#> 1949 -15.5659584  -5.1166582  10.6746976  -2.5049634  -6.5997280  12.4314297\n#> 1950 -14.6718797  -6.4388905   9.6194717  -3.1461337  -6.8325313  13.9823804\n#> 1951 -14.3668186 -10.0133549   8.1512522  -3.9327503  -6.5260005  15.9694386\n#> 1952 -16.0032186 -16.1441218   6.1993132  -5.4749115  -6.0574774  19.6037548\n#> 1953 -19.3904386 -23.7842228   4.3804356  -6.4713133  -5.4386206  23.1136461\n#> 1954 -22.7096600 -31.7561970   0.8693069  -7.5713703  -5.8764952  29.0150676\n#> 1955 -25.2061152 -38.3702327  -2.4922507  -9.3728030  -7.2219989  35.0703151\n#> 1956 -27.2592937 -44.7400289  -6.8355977 -11.3478239  -9.0715755  41.9928256\n#> 1957 -30.4084975 -50.2303838  -9.3485303 -13.7360201 -10.0700117  46.8001376\n#> 1958 -34.2844269 -56.9759590 -12.2428697 -14.4351482  -9.6673935  50.8810690\n#> 1959 -38.5358375 -63.8721083 -13.3387954 -14.1544077  -7.1836397  53.1204673\n#> 1960 -41.4799877 -70.1230714 -14.2790314 -12.9624237  -4.9253969  55.1638447\n#>              Jul         Aug         Sep         Oct         Nov         Dec\n#> 1949  28.8670127  28.4182408  10.5956420 -13.2826881 -31.6967072 -16.1051460\n#> 1950  29.7010803  30.4994983  10.3177865 -12.6362864 -32.7763353 -16.6102369\n#> 1951  33.1061081  34.0080012  10.3425740 -11.7546287 -34.8606150 -17.2272847\n#> 1952  40.1077865  39.4227489  11.7184034 -12.5007645 -39.0237846 -18.4305360\n#> 1953  50.6583169  45.4578537  14.5586872 -15.0819948 -44.0820987 -20.5308927\n#> 1954  62.3427733  53.9134947  17.5716068 -19.2516499 -50.3410579 -24.7215272\n#> 1955  73.7782169  64.5211332  20.5444510 -22.6188778 -57.5282485 -29.7481407\n#> 1956  84.4751122  77.0851381  22.0621828 -24.4019699 -65.1596996 -35.7482089\n#> 1957  94.2817690  89.3548741  24.3647486 -25.7347681 -72.8246311 -39.9102381\n#> 1958 102.6487868 100.6171898  25.5091217 -26.4831121 -79.6621688 -43.5810212\n#> 1959 107.9121081 109.9333848  26.7055680 -27.8514047 -84.9170678 -45.6833164\n#> 1960 110.6551145 116.6586380  26.1781212 -27.9062195 -88.4744199 -48.0143460"
  },
  {
    "objectID": "22-transform.html#case-study-2-more-difficult-decision",
    "href": "22-transform.html#case-study-2-more-difficult-decision",
    "title": "5  Transform",
    "section": "5.3 Case Study 2: More difficult decision",
    "text": "5.3 Case Study 2: More difficult decision\nConsider the situaiton where you are trying to decide on transform choices for monthly retail grocery store data. The series grocery is part of the seasonalbook package.\n\nlibrary(seasonalbook)\nplot(grocery)\n\n\n\n\nVisual inspection of the series shows no immediate reason to think we need to perform a log transform. There is possible seasonal hederoskadasity which could be mitigated by taking logs. Perform an X-11 adjustmnet with all of seasonal defaults.\n\nm <- seas(grocery, x11 = \"\")\nudg(m, c(\"aictest.trans.aicc.nolog\", \"aictest.trans.aicc.log\"))\n#> aictest.trans.aicc.nolog   aictest.trans.aicc.log \n#>                 4202.960                 4201.042\n\nThis is interesting since the AICC for no transformation is lower than the AICC for log transform.\n\ntransformfunction(m)\n#> [1] \"log\"\n\nThe default value for transform.aicdiff is -2 meaning the program slightly prefers log transform and the difference between the AICC values must exceed 2. In this situation we see the difference between the two AICC values is -1.917597. If you were to change this option to transform.aicdiff = 0 then the program selects no transform.\n\nm2 <- seas(grocery, x11 = \"\", transform.aicdiff = 2)\ntransformfunction(m2)\n#> [1] \"none\""
  },
  {
    "objectID": "23-regARIMA.html#sarima-model",
    "href": "23-regARIMA.html#sarima-model",
    "title": "6  regARIMA Model",
    "section": "6.1 SARIMA model",
    "text": "6.1 SARIMA model\nAs the name implies, there are two components that one needs to understand when fitting a regARIMA model; namely regression and ARIMA. Furthermore, the ARIMA part is made up by a differencing order and the stochastic ARMA portion. In this chapter, we try to break these three components down to the most fundamental ingredients without an overly technical exposition. Essentially, providing readers with enough information about each topic to understand the rest of this book and go off and perform satisfactory seasonal adjustment. The interested reader is encouraged to find material devoted to each of these components separately to more fully understand them.\nARIMA is an acronym describing the three parts of the modeling paradigm. AR = autoregressive, I = integrated (differenced), and MA = moving average. The prefix auto or “self”, explains the AR portion perfectly. We model the current observation with lagged values from the past. This is illustrated with the classic autoregressive model of order 1:\n\\[ Y_t = \\phi Y_{t-1} + a_t \\]\nwhere \\(Y_t\\) is the observed time series, \\(\\phi\\) is a coefficient to be estimated and \\(\\{a_t\\}\\) is an uncorrelated sequence of errors similar to that of standard linear regression. This model is notated AR(1). If instead of a single lag we used \\(p\\) lags, the model would be and AR(\\(p\\)) and have structure:\n\\[ Y_t = \\phi_1 Y_{t-1} + \\phi_2 Y_{t-2} + \\cdots + \\phi_p Y_{t-p} + a_t \\]\nwhere now we have \\(p\\) coefficients \\(\\phi_1, \\phi_2, \\ldots, \\phi_p\\) to be estimated.\nThe moving average part of ARIMA model is similar in notation and reflects the number of lagged values of the error sequence should be included. For example, an MA(1) model with coefficient parameter \\(\\theta\\) is:\n\\[ Y_t = a_t + \\theta a_{t-1} \\].\nNote that instead of doing self-regression we include past values of the unobserved errors in the model at time \\(t\\). If instead of a single lag we wanted \\(q\\) lags of the past error terms, we would have an MA(\\(q\\)) model:\n\\[ Y_t = a_t + \\theta_1 a_{t-1} + \\theta_2 a_{t-2} + \\cdots + \\theta_q a_{t-q} \\].\nWhen we combine these two ideas we can model \\(Y_t\\) with \\(p\\) lagged values of itself together with \\(q\\) lagged values of the unobserved errors. Together it makes an ARMA(\\(p\\), \\(q\\)) model, one of the fundamental ingredients to the regARIMA model. For a practitioner the automatic modeling done in X13 is often sufficient to find an appropriate value for \\(p\\) and \\(q\\) and hence a well fitting ARMA model. If it more important from a seasonal adjustment perspective to correctly specify the differencing and regression variables in your overall regARIMA model."
  },
  {
    "objectID": "23-regARIMA.html#differencing",
    "href": "23-regARIMA.html#differencing",
    "title": "6  regARIMA Model",
    "section": "6.2 Differencing",
    "text": "6.2 Differencing\nARMA models work best for stationary time series. This means the mean does not depend on time (such as increasing trend) or have a correlation structure that changes. Many techniques could be used to take a non-stationary time series and transform it to stationarity, one ubiquitous method is differencing. There is a famous results that states if you difference your series \\(k\\) times it will remove a polynomial trend of degree \\(k\\). Essentially, if you observe a time series with a linear trend then first differencing will remove the trend. If a time series has quadratic trend (polynomial of order 2) then differencing twice will remove that trend. A similar phenomenon can happen at seasonal lags and often a time series will also require seasonal differencing to reduce it to stationary. The order of differencing, also called the intgreation order, for the non-seaosnal and seasonal parts of our model are usually notated as \\(d\\) and \\(D\\) respectively. When we bring the integration order together with the stocastic model specification we have the notation \\[\\text{SARIMA}\\underbrace{(p, d, q)}_{\\text{non-seasonal }}\\underbrace{(P, D, Q)}_{\\text{seasonal}}.\\] This can be seen easily with an example. Consider the log transformed AirPassengers series.\n\nplot(log(AirPassengers))\n\n\n\n\nWe see a clear increasing trend and seasonal pattern. Let’s call the observed series \\(X_t\\). We can difference the series to make \\(Y_t = \\Delta X_t = X_t - X_{t-1}\\). A plot of \\(Y_t\\) looks like\n\nplot(diff(log(AirPassengers)))\n\n\n\n\nThe trend has been removed however some seasonal trend (strong seasonal patterns) still exist. Apply seasonal differencing to the already first differenced series \\(Y_t\\):\n\\[ Z_t = Y_t - Y_{t-12} \\]\nA plot of \\(Z_t\\):\n\nplot(diff(diff(log(AirPassengers)), 12))\n\n\n\n\nHere we can see that both the original linear trend and seasonal pattern are removed and what is left is a stationary process that can adequately be modeled with an SARMA(0, 1)(0, 1) model. When you bring in the integration (differencing) order of one for the seasonal and non-seasonal components, we are left with the model named after this exact time series! The so called ``airline model’’ is the SARIMA(0, 1, 1)(0, 1, 1) and the terminology came to popularity via Box and Jenkins, “Time Series Analysis, Forecasting and Control” textbook."
  },
  {
    "objectID": "23-regARIMA.html#fitting-sarima-optional",
    "href": "23-regARIMA.html#fitting-sarima-optional",
    "title": "6  regARIMA Model",
    "section": "6.3 Fitting SARIMA (optional)",
    "text": "6.3 Fitting SARIMA (optional)\nHere we present a very oversimplied way to start to understand what values of \\(p, P, q\\) and \\(Q\\) you can investigate for your time series of interest. Recall that earlier it was mentioned that using automatic model identification is sufficient for most to get an adequate seasonal adjustment. Hence, this is simply for the interested reader to begin to gain additional intuition into the stochastic structures involved in their series and the types of structures the automatic modeling procedures look at. One of the main tools in a time series analyist tool box is the autocorrelation function (ACF). This is a function that returns the correlation between observations \\(h\\) time units apart throughout the entire sample. So for \\(h=2\\) this means looking at the correlation between the pairs \\((X_1, X_3), (X_2, X_4), (X_3, X_5), \\ldots\\). Then a way to build a SARIMA model is to match the sample ACF and the theoretical ACF of a given model. The main point distinguishing an AR(\\(p\\)) and MA(\\(q\\)) is how their theoretical ACF behaves. An AR(\\(p\\)) will have ACF the has exponential decay as \\(h\\) increases. For example, an AR(1) ACF is \\[\\rho(h) = \\phi^h\\] An MA(\\(q\\)) models ACF will be non-zero for the first \\(q\\) lags and then cutoff to zero thereafter. The ACF of an MA(1) is \\[\\rho(h) = \\begin{cases}\n~~1 & h = 0 \\\\\n\\frac{\\theta}{1 + \\theta^2} & h = 1 \\\\\n~~0 & \\text{otherwise}\n\\end{cases}\n\\] In practice of course the difference between decay and cut-off can be nebulous to detect but the interested reader is encouraged to explore the arima.sim() function the look at the sample ACF with the acf() function. As you increase the sample size it will converge to the theoretical ACF value and you can start to see the structures just discussed.\n\nx_AR <- arima.sim(model = list(ar = .75), n = 300)\nx_MA <- arima.sim(model = list(ma = .75), n = 300)\ntsbox::ts_plot(cbind(x_AR, x_MA))\nop <- par(mfrow = c(1, 2), mar = c(5, 2, 4, 2))\nacf(x_AR, xlab = \"h\", main = \"\"); title(\"ACF of AR(1) model\")\nacf(x_MA, xlab = \"h\", main = \"\"); title(\"ACF of MA(1) model\")\npar <- op"
  },
  {
    "objectID": "23-regARIMA.html#regression",
    "href": "23-regARIMA.html#regression",
    "title": "6  regARIMA Model",
    "section": "6.4 Regression",
    "text": "6.4 Regression\nWe have discussed SARIMA modeling (both the SARMA and differencing), now we see how exogenous regression variables come into play.\nThe regARIMA model takes the form \\[ f\\left(\\frac{Y_t}{D_t} \\right) = \\boldsymbol{\\beta}^\\prime {\\mathbf X}_t + Z_t .\\] Here \\(Y_t\\) is the observed time series. The function \\(f\\) represents a transformation, most commonly used is the log transform ie \\(f(x) = \\log(x)\\). \\(D_t\\) is any intervention that has taken place prior to any transformation or modeling. This intervention is usually subjective and customized for individual series on an as-needed basis. For example, if a soybean farmer strike occurred and the soybean export series suffered for its duration. This type of event might adversely affect the seasonal adjustment filters and automatic model identification routines and can be mediated as an initial step. If no transformation or intervention is needed the model form is: \\[ Y_t = \\underbrace{\\boldsymbol{\\beta}^\\prime {\\mathbf X}_t}_{\\text{Regression}} + \\underbrace{Z_t}_{\\text{ARIMA}} .\\]\nThe regression variables appear in the columns of the design matrix \\({\\mathbf X}_t\\) and \\(Z_t\\) is an ARIMA process. This last assumption on \\(Z_t\\) is what distinguished a regARIMA model from more classic linear models and multiple linear regression where error terms are assumed uncorrelated.\nIn order to achieve a suitable seasonal adjustment it is important to get the regARIMA model correct. For most dataset the built in automatic modeling features of the X13 program will be suitable to detect a reasonable model. This can be used as a starting point for more rigorous regARIMA model development or used as the final regARIMA modeling choice for your seasonal adjustment needs. We evoke automatic model identification through the XXX spec. The default behavior of the R seasonal package is XXX which includes automatic model identification.\n\n\n\n\n\n\nAutomatic and manual model choice\n\n\n\nAs an aside, the general rule is to not use automatic modeling in production. This mean, if you are going to include seasonal adjustment as part of a large scale data processing that occurs regularly (say monthly), then it is not advisable to have automatic model identification run every month. Instead, an alternative process, is to run automodel once and then fix the model choice in the XXX spec file. This does not need to be done manually since the static() function from the seasonal package can do this for you.\n\n\n\n\n\nOutlier Type\nAutomatic Detection Available?\n\n\n\n\nAdditive outliers (AO)\nYes (default)\n\n\nLevel shifts (LS)\nYes (default)\n\n\nTemporary level shifts (TL)\nYes\n\n\nTemporary changes (TC)\nNo\n\n\nRamps (RP, QI, QD)\nNo\n\n\nSeasonal outliers (SO)\nNo"
  },
  {
    "objectID": "23-regARIMA.html#case-study-airpassengers",
    "href": "23-regARIMA.html#case-study-airpassengers",
    "title": "6  regARIMA Model",
    "section": "6.5 Case Study: AirPassengers",
    "text": "6.5 Case Study: AirPassengers\nConsider the default seasonal adjustment:\n\nlibrary(seasonal)\nm <- seasonal::seas(AirPassengers, x11 = \"\")\nprint(m$spc$automdl)\n#> $print\n#> [1] \"bestfivemdl\"\nprint(m$spc$arima)\n#> NULL\n\nNotice the value NULL indicates no ARIMA model is specified and the returned arguments for the automdl spec indicate it is active during the X13 run.\n\nseasonal::udg(m, \"automdl\")\n#>          automdl \n#> \"(0 1 1)(0 1 1)\"\n\nIndicates that automatic modeling identified the (0 1 1)(0 1 1) model as the best choice. If we want to hardcode this model for subsequent runs, and turn off automatic model identification, this can be done via\n\nm_call <- seasonal::static(m)\n#> seas(\n#>   x = AirPassengers,\n#>   x11 = \"\",\n#>   regression.variables = c(\"td1coef\", \"easter[1]\", \"ao1951.May\"),\n#>   arima.model = \"(0 1 1)(0 1 1)\",\n#>   regression.aictest = NULL,\n#>   outlier = NULL,\n#>   transform.function = \"log\"\n#> )\nm2 <- eval(m_call)\n\nThere are many options you can modify when searching for outliers in your series. Some of the most practical options to start your exploration are the type, critical value and span that you would like to search.\nHere is an example of using span to limit the outlier search to the last few years of a series:\n\nm_span <- seas(AirPassengers,\n  outlier.types = c(\"ao\", \"ls\", \"tc\"),\n  outlier.critical = 4.0,\n  outlier.span = \"1958.jan, \")\nsummary(m_span)\n#> \n#> Call:\n#> seas(x = AirPassengers, outlier.types = c(\"ao\", \"ls\", \"tc\"), \n#>     outlier.critical = 4, outlier.span = \"1958.jan, \")\n#> \n#> Coefficients:\n#>                    Estimate Std. Error z value Pr(>|z|)    \n#> Weekday           -0.002644   0.000604  -4.377 1.20e-05 ***\n#> Easter[1]          0.021321   0.008395   2.540  0.01110 *  \n#> MA-Nonseasonal-01  0.235404   0.083756   2.811  0.00495 ** \n#> MA-Seasonal-12     0.543743   0.074644   7.284 3.23e-13 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 144  Transform: log\n#> AICc: 965.3, BIC: 979.2  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 28.26   Shapiro (normality): 0.9829 .\nm_nospan <- seas(AirPassengers,\n  outlier.types = c(\"ao\", \"ls\", \"tc\"),\n  outlier.critical = 4.0)\nsummary(m_nospan)\n#> \n#> Call:\n#> seas(x = AirPassengers, outlier.types = c(\"ao\", \"ls\", \"tc\"), \n#>     outlier.critical = 4)\n#> \n#> Coefficients:\n#>                     Estimate Std. Error z value Pr(>|z|)    \n#> Weekday           -0.0029497  0.0005232  -5.638 1.72e-08 ***\n#> Easter[1]          0.0177674  0.0071580   2.482   0.0131 *  \n#> AO1951.May         0.1001558  0.0204387   4.900 9.57e-07 ***\n#> MA-Nonseasonal-01  0.1156204  0.0858588   1.347   0.1781    \n#> MA-Seasonal-12     0.4973600  0.0774677   6.420 1.36e-10 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 144  Transform: log\n#> AICc: 947.3, BIC: 963.9  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 26.65   Shapiro (normality): 0.9908\n\nThe default critical value is set based on the length of the outlier span. Notice the MA-Nonseasonal-01 value when comparing m_span with m_nospan. We see the choice of span, and ultimately the choise to include an outlier in your model can have a dramatic effect on the estimated regARIMA parameters."
  },
  {
    "objectID": "23-regARIMA.html#case-study-2",
    "href": "23-regARIMA.html#case-study-2",
    "title": "6  regARIMA Model",
    "section": "6.6 Case study 2",
    "text": "6.6 Case study 2\nDecide if you should include AO in May 2014. Construct a simple user defined regressor to handle specific issue."
  },
  {
    "objectID": "24-seats.html",
    "href": "24-seats.html",
    "title": "7  SEATS",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\nIt is part of the course materials intended for Jan 21, 2023.\n\n\n\n\n\nHow to use the SEATS spec\nSEATS vs X11\nCase Study:\n\nFor SEATS, can be quite challenging since it relies heavily on seasonal ARIMA modeling."
  },
  {
    "objectID": "25-x11.html#additive-and-multiplicative-again",
    "href": "25-x11.html#additive-and-multiplicative-again",
    "title": "8  X11",
    "section": "8.1 Additive and multiplicative (again)",
    "text": "8.1 Additive and multiplicative (again)\nThe X-13ARIMA-SEATS development was highly motivated to study economic time series. As such, the default seasonal adjustment mode is multiplicative due to most seasonal economic time series displaying seasonal fluctuations that increase and decrease along with the level of the time series.\n\nIf your series does not have this feature then additive adjustment might be more appropriate. This can be changed in the mode argument of the x11 spec. For example, seas(x, x11.mode = 'add') will perform an additive x11 run. There exist two other models for decomposition, pseudo-additive and log additive. These are less common than additive and multiplicative models and are not the focus of this text. If your series has some extremely small values in certain months (quarters) then pseudo-additive models could be worth further investigation. It has been observed that when multiplicative seasonal adjustment produces more extreme values in conjunction with small seasonal factors then pseudo-additive adjustment should be explored. NEED TO SHOW USERS HOW TO VIEW THEIR EXTREME VALUES - D8.B TABLE DESIGNATIONS NEXT TO OBSERVATIONS. A good reference on the subject is Baxter (1994)."
  },
  {
    "objectID": "25-x11.html#filter-length",
    "href": "25-x11.html#filter-length",
    "title": "8  X11",
    "section": "8.2 Filter length",
    "text": "8.2 Filter length\nThe X11 spec also allows users to control the length of the trend and seasonal moving average filters used during the adjustment. Generally speaking, longer filters imply a more stable seasonal component and shorter filters a more changing seasonal pattern. Of course, a longer filter will use more data for the caluclation of components at each time point. This is an important observation and understanding it might help a user decide on a short or long filter. Since longer filters use more data there tend to be smaller revisions when a new data point is added. However, there will be revisions to data values further back.\nA shorter filter is just the opposite, they tend to produce smaller revisions but they do not extend as far back into the series. If a filter is not choosen by the user then automatic filter selection is used. To understand the length of a filter let’s look at the (finite) number of choice available in during an x11 adjustment. Table 8.1 shows the different filters available for the seasonal component and the trend component.\n\n\nTable 8.1: Filters available in X11\n\n\n\n\n\n\nValue\nDescription\n\n\n\n\ns3x1\n3×1 moving average\n\n\ns3x3\n3×3 moving average\n\n\ns3x5\n3×5 moving average\n\n\ns3x9\n3×9 moving average\n\n\ns3x15\n3×15 moving average\n\n\nstable\nStable seasonal filter. A single seasonal factor for each calendar month or quarter is generated by calculating the simple average of all the values for each month or quarter (taken after detrending and outlier adjustment).\n\n\nx11default\nA 3×3 moving average is used to calculate the initial seasonal factors in each iteration, and a 3×5 moving average to calculate the final seasonal factors."
  },
  {
    "objectID": "25-x11.html#extrem-value",
    "href": "25-x11.html#extrem-value",
    "title": "8  X11",
    "section": "8.3 Extrem value",
    "text": "8.3 Extrem value\n\n\n\n\n\n\nRelated concept: Outlier\n\n\n\nFIXME: explain how this is related to transform."
  },
  {
    "objectID": "25-x11.html#case-study",
    "href": "25-x11.html#case-study",
    "title": "8  X11",
    "section": "8.4 Case study",
    "text": "8.4 Case study\n\ntsbox::ts_plot(\n  s3x1 = predict(seas(AirPassengers, x11.seasonalma = \"s3x1\")),\n  s3x15 = predict(seas(AirPassengers, x11.seasonalma = \"s3x15\"))\n)"
  },
  {
    "objectID": "30-part-data-problems.html",
    "href": "30-part-data-problems.html",
    "title": "Data Problems",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\nIn part III we look at more in-depth at practical issues with seasonal adjustment. The focus is on concrete solutions to each situation presented. Each subsection will prominently feature a case study dedicated to each problem."
  },
  {
    "objectID": "31-holidays.html",
    "href": "31-holidays.html",
    "title": "9  Irregular holidays",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\nIt is part of the course materials intended for Jan 21, 2023.\n\n\n\n\n\nWhy should we adjust for holiday effects\nEaster adjustment\nUser defined adjustments (Chinese New Year, Diwali)\nCase Study: How to adjust for Ramadan (which is connected with some additional challenges)"
  },
  {
    "objectID": "32-trading-days.html",
    "href": "32-trading-days.html",
    "title": "10  Trading days",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\n\nWhy should we adjust for trading day effects\nSeven or two coefficient trading day\nUsing country specific calendars\nCase Study: Movie tickets (or another series with very clear trading day effects)"
  },
  {
    "objectID": "33-outliers.html",
    "href": "33-outliers.html",
    "title": "11  Outliers",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\n\nWhy care about outliers?\nAdditive outliers, level shifts, temporary changes"
  },
  {
    "objectID": "34-seasonal-breaks.html",
    "href": "34-seasonal-breaks.html",
    "title": "12  Seasonal breaks",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\n\nWhy to care about seasonal breaks?\nDetection of seasonal breaks\nCorrection for seasonal breaks"
  },
  {
    "objectID": "40-part-other-issues.html",
    "href": "40-part-other-issues.html",
    "title": "Other Issues",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\nPart IV investigates more holistic issues that practitioners face. The main focus is to give classical methodology to answer their problems. Since these types of issues can be highly specialized, we concentrate on known solutions to the topics."
  },
  {
    "objectID": "41-presence-of-seasonality.html",
    "href": "41-presence-of-seasonality.html",
    "title": "13  Presence of seasonality",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\nShould a series be seasonally adjusted at all?\nX-13AS removes seasonality from series, even if a series is not seasonal from the beginneing. If a series is not seasonal, the resulting series may be bad.\nFortunatly, X-13 contains a few tests that help users to decide if a series is is seasnal or not.\nBefore appying X-13AS ist may be necessary to descide if the series is seasonal.\n\n13.0.1 Avalabele Tests\nX13 offers has several formal checks:\n\nqs test\nids\nm7\n\nThe ids test is closely connected to m7, but the QS test is quite different. Which tests are preferrable, and how should a user descide if the tests are not aligned?\n\n\n13.0.2 ids test\nhttp://www.ons.gov.uk/ons/guide-method/method-quality/general-methodology/time-series-analysis/guide-to-seasonal-adjustment.pdf\n\nFrom ONS 18.2 A general criterion for existence of seasonality\nEmpirical research showed that the most appropriate test for seasonality is the “Combined test for the presence of identifiable seasonality”, given after table D8 of the output. In particular, one of the following statements will always appear:\n\nIDENTIFIABLE SEASONALITY PRESENT\nIDENTIFIABLE SEASONALITY PROBABLY NOT PRESEN\nIDENTIFIABLE SEASONALITY NOT PRESENT\n\nIt is recommended that a series is adjusted in the first two cases and not adjusted in the last one. However there are two cases where one might need to deviate from this practice:\n\nThis is the ids test shown below\n\n\n13.0.3 Case Study"
  },
  {
    "objectID": "42-annual-constraining.html",
    "href": "42-annual-constraining.html",
    "title": "14  Annual constraining",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\n\nShould the annual values be restrained?\nHow to use the force spec"
  },
  {
    "objectID": "43-indirect-vs-direct.html",
    "href": "43-indirect-vs-direct.html",
    "title": "15  Indirect vs direct adjustment",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\n\nShould the subcomponents of a series be adjusted separately?"
  },
  {
    "objectID": "50-part-quality-assessment.html",
    "href": "50-part-quality-assessment.html",
    "title": "Quality assessment",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\nThis section focuses on diagnostic tools for seasonal adjustment. This will be written as a stand-alone section as well as a continuance of prior sections. The idea here is that many readers may be interested in checking the quality of their adjustments but not need help performing it."
  },
  {
    "objectID": "51-quality-measures.html",
    "href": "51-quality-measures.html",
    "title": "16  Quality measures",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\n\nWhat is a good seasonal adjustment?\nM statistics\nOther statistics available in X13"
  },
  {
    "objectID": "52-revisions.html",
    "href": "52-revisions.html",
    "title": "17  Revisions",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\n\nHow to measure revisions?\nShould a model be re-estimated each period?\nHow to use the slidingspan and history spec"
  },
  {
    "objectID": "60-part-future.html",
    "href": "60-part-future.html",
    "title": "The future of seasonal adjustment",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\nThis short section outlines the future projects in the seasonal adjustment field. Daily or multiple seasonal adjustment plays a major role here. Ideally, examples of how to solve these problems are given.\n\nDaily adjustment\nMultivariate seasonal adjustment\nOther methods"
  },
  {
    "objectID": "99-status.html",
    "href": "99-status.html",
    "title": "Status of the book",
    "section": "",
    "text": "Current status of sections \n\n\n\n\n\n\n\nsection name\nstatus\ndue date\n\n\n\n\nHow to use the book\ndrafting\n2022-12-21\n\n\nTransform\ndrafting\n2022-12-21\n\n\nX11\ndrafting\n2022-12-21\n\n\nA minimal example\npolishing\n2022-12-21\n\n\nOverview of the software\npolishing\n2022-12-21\n\n\nregARIMA Model\npolishing\n2022-12-21\n\n\nHolidays\ndrafting\n2023-01-21\n\n\nSEATS\ndrafting\n2023-01-21"
  }
]