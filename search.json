[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Seasonal Adjustment in R",
    "section": "",
    "text": "Welcome\nThis is the website for the work-in-progress edition of Seasonal Adjustment in R, an online Book by James Livsey and Christoph Sax."
  },
  {
    "objectID": "index.html#about-the-book",
    "href": "index.html#about-the-book",
    "title": "Seasonal Adjustment in R",
    "section": "About the book",
    "text": "About the book\nThis book will teach you how to do seasonal adjustment in R, using X13-ARIMA-SEATS.\nSpecifically, the audience will be both R users who want to learn about seasonal adjustment as well as seasonal adjustment practitioners, who are interested in using R. The book will be tailored to the practical applications of seasonal adjustment within R. It presents background material and references for the theoretically minded reader. The main focus, however, is on concrete problems and examples.\nWe will showcase methods through detailed examples with associated code. This presentation allows the academic level to be quite broad; understood by undergraduates all the way through advanced Ph.D. students."
  },
  {
    "objectID": "index.html#key-features-of-the-book",
    "href": "index.html#key-features-of-the-book",
    "title": "Seasonal Adjustment in R",
    "section": "Key features of the book",
    "text": "Key features of the book\n\nEach chapter include a concrete practical problem and shows how X-13 can be used to address it\nTeach-by-example format\nContinuous connection of X-13ARIMA-SEATS input with R input and vice-versa\nFundamental theoretical material is referenced throughout (mainly as an option)\nFor each example given the book will give answers, code and provide data"
  },
  {
    "objectID": "10-introduction.html#seasonal-adjustment",
    "href": "10-introduction.html#seasonal-adjustment",
    "title": "1  Introduction",
    "section": "Seasonal Adjustment",
    "text": "Seasonal Adjustment\nMany time series exhibit a regular seasonal pattern over the year. US unemployment, for example, is usually higher from January to March and again in June and July. Similarly, retail sales tend to peak during the Christmas season. This seasonal behavior is regular and predictable. The goal of seasonal adjustment is to estimate and remove the seasonal component from a time series.\nWhy do we want to do this? Seasonal data is usually hard to interpret. For example, if we want to learn from the US unemployment rate if the economy is moving out of a recession during certain months, we want the labor market data to be free from seasonal effects."
  },
  {
    "objectID": "10-introduction.html#x-13arima-seats",
    "href": "10-introduction.html#x-13arima-seats",
    "title": "1  Introduction",
    "section": "X-13ARIMA-SEATS",
    "text": "X-13ARIMA-SEATS\nFundamentally, seasonal adjustment decomposes a time series into a trend, a seasonal, and an irregular component. Seasonal adjustment is then the act of removing the seasonal estimate from the observed series. There are many ways to perform this decomposition. This book focuses on a particular one, X-13ARIMA-SEATS (X-13, for short), the seasonal adjustment software developed by the United States Census Bureau. X-13 offers an elaborate toolkit to perform seasonal adjustment. The software allows users to control all aspects of the modeling process or alternatively, to use automated methods to make all modeling choices. In the text we will try to present material with this in mind. Throughout we offer suggestions about when built-in automatic method are sufficient (and sometimes even preferred) and when an analyst can get the most ``bang for the buck’’ to control modeling options themselves."
  },
  {
    "objectID": "10-introduction.html#r",
    "href": "10-introduction.html#r",
    "title": "1  Introduction",
    "section": "R",
    "text": "R\nThis book will teach you how to use X-13 in R through the seasonal package, which offers access to all features of X-13 with a usually much simpler syntax. It should be noted that the seasonal package is not a re-coding of the X-13 software. Instead it is a translation from R to the X-13 software. This translation is done under the hood and practitioners need not concern themselves with this inner working of the package. However, we make this point such that users understand that conceptually anything that can be done in the native X-13ARIMA-SEATS software, either from the command line or HTML version, can be done in the seasonal R package. Also this means if additional clarification or information about seasonal adjustment is desired, the X-13 manual or research papers can be consulted. Any example or methods found via the X-13 documentation can be easily translated to the R seasonal package. In fact, all examples from the X-13 manual can be seen run in the R seasonal package at http://www.seasonal.website/examples.html. The required X-13 binaries are provided by the x13binary package and automatically included in seasonal. The next chapter provides a minimal example to get you started in less than five minutes."
  },
  {
    "objectID": "10-introduction.html#target-audience",
    "href": "10-introduction.html#target-audience",
    "title": "1  Introduction",
    "section": "Target audience",
    "text": "Target audience\nWe write this book for two primary audiences: The first focus is on current practitioners of seasonal adjustment who are interested in learning how to implement in R. This audience includes researchers from statistical agencies who want to use features of R to evaluate the properties of their seasonal adjustments.\nThe second focus is on current R users who want to learn seasonal adjustment. We are able to leverage the reader’s knowledge of R to make learning seasonal adjustment easier. We will feature exciting applications outside official statistics, such as the seasonal adjustment of business data.\nThe book tries to be as practical as possible. It usually starts with a practical problem and shows how to solve it in a cookbook style. Formal derivations are usually avoided. Each chapter ends with a case study that discusses a real-life example of the topic."
  },
  {
    "objectID": "10-introduction.html#history-of-x-13",
    "href": "10-introduction.html#history-of-x-13",
    "title": "1  Introduction",
    "section": "History of X-13",
    "text": "History of X-13\nIn official statistics, seasonal adjustment has a long tradition. The US Census Bureau developed the original X-11 software in the 1960s, Statistics Canada (Dagum 1980) continued the development afterward. The following software packages by the US Census Bureau were called X-12-ARIMA (Findley et al. 1998) and X-13ARIMA-SEATS (or X-13, for short) (Monsell 2007). X-11 is still used as a name for filter-based seasonal adjustment methods within X-13. Meanwhile, TRAMO-SEATS, developed by the Bank of Spain (Caporello, Maravall, and Sánchez 2001), offers an alternative model-based approach to seasonal adjustment.\n\nDagum, Estela Bee. 1980. The x-11-ARIMA Seasonal Adjustment Method. Statistics Canada, Seasonal Adjustment; Time Series Staff.\n\nFindley, David F, Brian C Monsell, William R Bell, Mark C Otto, and Bor-Chung Chen. 1998. “New Capabilities and Methods of the x-12-ARIMA Seasonal-Adjustment Program.” Journal of Business & Economic Statistics 16 (2): 127–52.\n\nMonsell, B. 2007. “The x-13A-s Seasonal Adjustment Program.” In Proceedings of the 2007 Federal Committee on Statistical Methodology Research Conference. http://www.fcsm.gov/07papers/Monsell.II-B.pdf.\n\nCaporello, Gianluca, Agustin Maravall, and Fernando J Sánchez. 2001. “Program TSW Reference Manual.” 0112. Banco de España Madrid. https://ideas.repec.org/p/bde/wpaper/0112.html.\n\nNational Bank of Belgium, Deutsche Bundesbank, Eurostat. 2017. JDemetra+: Econometric Software for Seasonal Adjustment and Other Time Series Methods. Eurostat. https://ec.europa.eu/eurostat/cros/content/download.\nIn its most recent version, X-13 offers these two seasonal adjustment methods in a single command-line tool written in Fortran. The National Bank of Belgium has created an alternative Java-based implementation called JDemetra+ (National Bank of Belgium, Deutsche Bundesbank, Eurostat 2017), also widely deployed by statistical agencies."
  },
  {
    "objectID": "10-introduction.html#the-seasonalbook-package",
    "href": "10-introduction.html#the-seasonalbook-package",
    "title": "1  Introduction",
    "section": "1.1 The seasonalbook package",
    "text": "1.1 The seasonalbook package\nAn R package that supplements “Seasonal Adjustment in R”, and contains all data and examples.\nTo install:\nremotes::install_github(\"christophsax/seasonalbook\")\nExample series:\n\nlibrary(seasonalbook)\nplot(grocery)"
  },
  {
    "objectID": "10-introduction.html#acknowledgements",
    "href": "10-introduction.html#acknowledgements",
    "title": "1  Introduction",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nWe are indebted to the United States Census Bureau for X-13ARIMA-SEATS and support for research around the software. Help and support by Brian Monsell are especially acknowledged.\nseasonal was originally developed for use at the Swiss State Secretariat of Economic Affairs. It has been dramatically improved thanks to suggestions and support from Matthias Bannert, Freya Beamish, Vidur Dhanda, Alain Galli, Ronald Indergand, Preetha Kalambaden, Stefan Leist, James Livsey, Pinaki Mukherjee, Bruno Parnisari and many others. The related work on the x13binary package facilitated (automated) deployment thanks to the R package system, CRAN, and GitHub for the x13prebuilt repository."
  },
  {
    "objectID": "10-introduction.html#references",
    "href": "10-introduction.html#references",
    "title": "1  Introduction",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "11-getting-started.html#installation",
    "href": "11-getting-started.html#installation",
    "title": "2  Getting started",
    "section": "2.1 Installation",
    "text": "2.1 Installation\nIf you use R, installing X-13ARIMA-SEATS from CRAN is as easy as installing any other R package (Sax and Eddelbuettel 2018):\n\nSax, Christoph, and Dirk Eddelbuettel. 2018. “Seasonal Adjustment by X-13ARIMA-SEATS in R.” Journal of Statistical Software 87 (11): 1–17. https://doi.org/10.18637/jss.v087.i11.\ninstall.packages(\"seasonal\")"
  },
  {
    "objectID": "11-getting-started.html#sec-a-minimal-example",
    "href": "11-getting-started.html#sec-a-minimal-example",
    "title": "2  Getting started",
    "section": "2.2 A minimal example",
    "text": "2.2 A minimal example\nOnce the package is installed, you can load it in the usual way:\n\nlibrary(seasonal)\n\nThe seas() function provides the core functionality of the package. By default, seas calls the automatic procedures of X-13 to perform a seasonal adjustment that works well in most circumstances:\n\nseas(AirPassengers)\n#> \n#> Call:\n#> seas(x = AirPassengers)\n#> \n#> Coefficients:\n#>           Weekday          Easter[1]         AO1951.May  MA-Nonseasonal-01  \n#>          -0.00295            0.01777            0.10016            0.11562  \n#>    MA-Seasonal-12  \n#>           0.49736\n\nThe first argument of seas is a time series of class ts. ts objects are frequently used in base R and are useful to store monthly, quarterly, or annual data. We restrict our attention to monthly and quarterly series. This is done for two reasons; first is these are the main frequencies handled by X-13, second, this sampling frequency make conceptual understanding of statistical methods, such as linear filters, easier to grasp. The AirPassengers example series is included in base R and shows monthly totals of international airline passengers from 1949 to 1960. seas() returns a seas object that contains the necessary information on the adjustment performed on this time series; we can assign it to a variable:\n\nm <- seas(AirPassengers)\n\nThere are several functions and methods for \"seas\" objects. The final function returns the adjusted series. The plot method shows a plot with the unadjusted and the adjusted series.\n\nplot(m)\n\n\n\n\nAs you can see, the adjusted series is much less volatile than the original one because the seasonal component was removed from the original series. But the adjusted series is not entirely smooth. This is because it still contains the irregular component.\nThis constitutes a crucial point about seasonal adjustment: It only removes regular, predictable movements, not irregular ones. In the adjusted series, we can see a decrease in airline passengers in 1953 and between 1957 and 1958. These decreases were difficult to discover in the original series.\nThe summary method displays an overview of the model, very similar to the one produced by other R classes (eg lm or numeric):\n\nsummary(m)\n#> \n#> Call:\n#> seas(x = AirPassengers)\n#> \n#> Coefficients:\n#>                     Estimate Std. Error z value Pr(>|z|)    \n#> Weekday           -0.0029497  0.0005232  -5.638 1.72e-08 ***\n#> Easter[1]          0.0177674  0.0071580   2.482   0.0131 *  \n#> AO1951.May         0.1001558  0.0204387   4.900 9.57e-07 ***\n#> MA-Nonseasonal-01  0.1156204  0.0858588   1.347   0.1781    \n#> MA-Seasonal-12     0.4973600  0.0774677   6.420 1.36e-10 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 144  Transform: log\n#> AICc: 947.3, BIC: 963.9  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 26.65   Shapiro (normality): 0.9908\n\nThe summary gives an overview of the adjustment model and provides diagnostics. This book will help you do understand it in more detail. The following section discusses some of the elements and relates them to the chapters in this book."
  },
  {
    "objectID": "11-getting-started.html#where-to-go-from-here",
    "href": "11-getting-started.html#where-to-go-from-here",
    "title": "2  Getting started",
    "section": "2.3 Where to go from here",
    "text": "2.3 Where to go from here\nseas(AirPassengers) produces a good seasonal adjustment of the airline passengers time series. If you are very new to seasonal adjustment, the automated routines of X-13 and seasonal produce an adjustment that works well in most circumstances.\nThe command seas(AirPassengers) has invoked a large number of specs of X-13. spec is X-13 slang for a module within the software. X-13 is built on top of twenty specs that perform various subtasks of seasonal adjustment. Some specs are required most of the time (e.g., regression), while others are optional (e.g., seats) or purely technical (e.g., spans shortens the time series in use). Chapter 3 discusses the available specs in more detail.\nThis book teaches you how to use and fine-tune the individual specs and deal with concrete data problems.\n\n2.3.1 Fundamentals\nSpecifically, the command seas(unemp) has invoked the following fundamental specs – they are involved in most adjustments and are covered in the first part of the book:\n\nTransform\n\nA decision on initial transformation was made. The automated procedures concluded that a log transformation was made and a multiplicative seasonal adjustment model, rather than an additive model, was estimated. Chapter 4 discusses the choices. Since transform is a relatively simple spec, it is a good starting point to familiarize yourself with the spec idea.\n\nRegression\n\nAn automated model search concluded that AirPassengers is best modeled by an (0 1 1)(0 1 1) ARIMA model. Chapter 5 explains what that means and how such a model structure is determined and estimated.\n\nSEATS / X11\n\nSeasonal decomposition is performed by SEATS. SEATS is one of the two options for decomposing a series and is discussed in more detail in Chapter 7. The alternative, X11, is discussed in Chapter 6.\n\n\n\n\n2.3.2 Data issues\nThe command seas(AirPassengers) has also dealt with various data issues, which are covered in the second part of the book:\n\nHoliday\n\nSignificant Easter effects have been found in AirPassengers and were removed from the adjusted series. Moving holidays like Easter or Chinese New Year are vital in seasonal adjustment since they may significantly impact the behavior of many time series. For AirPassengers, the number of passengers is higher in months with Easter. Moving holiday effects will be discussed in Chapter 8.\n\nWeekday\n\nNot every month has the same number of weekdays. Since many activities (such as air traveling) differ between weekends and weekdays, this constitutes another predictable component. In AirPassengers, there are fewer passengers on a weekday than during a weekend, and the automated procedures decided to remove the effect. These effects are discussed in Chapter 9.\n\nOutliers\n\nCertain data points may be well out of the ordinary. These outliers are a problem for the modeling and adjustment process. An automated procedure scanned the series for outliers and found an additive outlier on May 1951. This outlier is shown in the plot above, too. Outliers are discussed in Chapter 10.\n\nSeasonal Breaks\n\nThe seasonal pattern in AirPassengers looks relatively stable. Some time series, however, show abrupt changes in the seasonal pattern. Chapter 11 discusses them and shows how to deal with seasonal breaks.\n\n\n\n\n2.3.3 Additional issues\nThe third part of the book deals with additional issues:\n\nPresence of seasonality\n\nWhile the presence of seasonality in AirPassengers is prominent, this is not always the case. If a series has no seasonal pattern, there is no need for a seasonal adjustment. If it is adjusted anyway, the process adds noise to the series and should be avoided. Chapter 12 shows how seasonality can be detected and how to decide whether an adjustment should be made or not.\n\nAnnual constraining\n\nUsually, a seasonal adjustment may affect the annual values of a time series. In part, this is by design. The number of weekdays may differ between years, so the adjusted annual values may be different too. In part, this may be an artifact of the adjustment process. X-13 offers tools to enforce the annual values of the adjusted series to be the same as the original one. Chapter 13 shows how to constrain annual value and whether it is a good idea.\n\nIndirect vs. direct adjustment\n\nOften, a seasonal adjustment may be performed on individual series or on an aggregate of multiple series. X-13 offers tools that let you compare these two possibilities. Chapter 14 discusses the options and helps you to decide which one is better.\n\n\n\n\n2.3.4 Quality assessment\nAdjusting a series with the automated procedure is straightforward. But is the resulting series a reasonable adjustment? The fourth part helps you to decide between competing seasonal adjustment models.\n\nQuality measures\n\nIn the lower part, the summary of the adjustment model shows various quality measures: The AICc and BIC information criterion and the QS, the Box-Ljung, and the Shapiro statistic. None of them shows any significance (indicated by one or several stars), which is a good sign. Various quality measures and their interpretation is shown in Chapter 15.\n\nRevisions\n\nWhen comparing seasonal adjustment models, the stability of the model and the series is often an important consideration. One does not want to get a different series with a new data point. X-13 offers tools to analyze revisions. Chapter 16 discusses them and helps you to decide which model to pick."
  },
  {
    "objectID": "11-getting-started.html#references",
    "href": "11-getting-started.html#references",
    "title": "2  Getting started",
    "section": "2.4 References",
    "text": "2.4 References"
  },
  {
    "objectID": "20-part-basics.html",
    "href": "20-part-basics.html",
    "title": "Basics",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is complete enough as an education tool and can be used in a course. It needs additional polishing.\n\n\n\n\nThis section gets readers familiar with X-13ARIMA-SEATS. It begins by explaining the history and pedagogy of the software (Chapter 3). This leads directly into discussing the principal elements of X-13ARIMA-SEATS."
  },
  {
    "objectID": "21-overview.html#main-specs",
    "href": "21-overview.html#main-specs",
    "title": "3  The fundamentals of X-13",
    "section": "3.1 Main specs",
    "text": "3.1 Main specs\nSome specs, like the transform and the regression spec, are used in most seasonal adjustment processes. Others fulfill a particular function and are used only occasionally. For example, the history spec allows an analysis of the revision history and is only called for diagnostical purposes. Other specs are mutually exclusive. You can choose x11 or seats to decompose a time series, but not both. Table 3.1 lists the main specs of X-13 and describes what they do.\n\n\nTable 3.1: Important specs that are used in most seasonal adjustment models\n\n\n\n\n\n\n\nSpec name\nWhat it does\nChapter\n\n\n\n\nestimate\nEstimates the regARIMA model specified by the regression and arima specs.\nChapter 5\n\n\narima\nSpecifies the ARIMA part of the regARIMA model.\nChapter 5\n\n\nregression\nSpecification for including regression variables in a regARIMA model.\nChapter 5, Chapter 8, Chapter 9\n\n\nautomdl\nSpecifies the ARIMA part of the regARIMA model using an automatic procedure.\nChapter 5\n\n\noutlier\nSpecification to perform automatic detection of additive (point) outliers.\nChapter 10\n\n\nseats\nInvoke the production of model-based signal extraction using SEATS. Default in the R seasonal package.\nChapter 7\n\n\nx11\nAn optional spec for invoking seasonal adjustment by the X-11 methodology.\nChapter 6\n\n\nforecast\nSpecification to forecast and/or backcast the time series given in the series spec using the estimated model.\nChapter 5"
  },
  {
    "objectID": "21-overview.html#interactions-between-specs",
    "href": "21-overview.html#interactions-between-specs",
    "title": "3  The fundamentals of X-13",
    "section": "3.2 Interactions between specs",
    "text": "3.2 Interactions between specs\nX-13 specs interact with each other. For example, once a series is transformed, it is usually passed to the regression and arima specs, which estimate a regARIMA model. To come up with a good model, it uses the automdl spec to determine a good ARIMA model automatically. To correct outlier values, it collaborates with the outlier spec. Once the series is modeled, it is decomposed either by the seats or the x11 spec. Figure 6.1 shows the interaction between the main specs in a typical seasonal adjustment run.\n\n\n\n\n\n\nflowchart LR\n    A(  transform  )-->regARIMA\n    subgraph regARIMA\n    direction LR\n    B(estimate)<-->D(regression)\n    B<-->C(automdl)\n    B<-->E(arima)\n    end\n    regARIMA --> F(seats)\n    regARIMA --> G(x11)\n\n\n\n\n\nFigure 3.1: Interactions between X-13 specs."
  },
  {
    "objectID": "21-overview.html#specs-arguments",
    "href": "21-overview.html#specs-arguments",
    "title": "3  The fundamentals of X-13",
    "section": "3.3 Specs Arguments",
    "text": "3.3 Specs Arguments\nWithin specs, there are arguments. Spec arguments guide the behavior of the spec. For example, the function argument in the transform spec can be set to \"auto\", \"none\", \"log\", \"sqrt\", \"inverse\" or \"logistic“. The default is set to \"auto\", which causes an automated model evaluation between \"log\" and \"none\". There are many other arguments, and the X-13 Manual (US Census Bureau 2017) is the canonical reference. This book will list and explain the frequently used arguments while skipping some of the more exotic ones.\n\nUS Census Bureau. 2017. X-13ARIMA-SEATS Reference Manual. Version 1.1. Washington, DC, USA: Time Series Research Staff, Center for Statistical Research; Methodology, US Census Bureau. http://www.census.gov/ts/x13as/docX13ASHTML.pdf."
  },
  {
    "objectID": "21-overview.html#addressing-specs-from-r",
    "href": "21-overview.html#addressing-specs-from-r",
    "title": "3  The fundamentals of X-13",
    "section": "3.4 Addressing specs from R",
    "text": "3.4 Addressing specs from R\nIn the R package seasonal, spec argument combinations can be directly fed to the seas() function. For example, to turn off the log transformation in the AirPassengers example from Section 2.2, we can specify the following:\n\nm_no_log <- seas(AirPassengers, transform.function = \"none\")\nsummary(m_no_log)\n#> \n#> Call:\n#> seas(x = AirPassengers, transform.function = \"none\")\n#> \n#> Coefficients:\n#>                   Estimate Std. Error z value Pr(>|z|)    \n#> Constant          30.62077    4.60956   6.643 3.08e-11 ***\n#> Leap Year         11.32104    3.43088   3.300 0.000968 ***\n#> Weekday           -0.90361    0.17787  -5.080 3.77e-07 ***\n#> Easter[1]          6.89372    1.80972   3.809 0.000139 ***\n#> AR-Nonseasonal-01  0.81929    0.04903  16.709  < 2e-16 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (1 0 0)(0 1 0)  Obs.: 144  Transform: none\n#> AICc: 993.4, BIC:  1010  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.):  29.2   Shapiro (normality): 0.984\n\nAs you can see from the lower part of the summary, transform is now set equal to none. Note that the change in the transform argument has also affected the other specs. The ARIMA model is different now, and a leap-year adjustment is performed. We will discuss the working of the transform spec in more detail in the next chapter."
  },
  {
    "objectID": "21-overview.html#less-frequently-used-specs",
    "href": "21-overview.html#less-frequently-used-specs",
    "title": "3  The fundamentals of X-13",
    "section": "3.5 Less frequently used specs",
    "text": "3.5 Less frequently used specs\nWhile the main specs appear in most seasonal adjustment processes, other specs are less often used. Some of them have a diagnostic purpose. The spectrum spec, for example, draws and analyses the spectrum of a time series, similar to the R base function spectrum(). Other specs are more elaborate. For example, the history spec produces a sequence of runs from a sequence of truncated versions of the time series and allows the analysis of potential revisions. The slidingspans spec models various parts of the time series and has a similar purpose as history. All diagnostics specs are listed in Table 3.3.\n\n\nTable 3.2: Diagnostic specs\n\n\n\n\n\n\n\nSpec name\nWhat it does\nChapter\n\n\n\n\nhistory\nRequesting a sequence of runs from a sequence of truncated versions of the time series for the purpose of creating historical records.\nChapter 16\n\n\nslidingspans\nProviding sliding spans stability analysis.\nChapter 16\n\n\nidentify\nProduce tables and line printer plots of sample ACFs and PACFs.\n\n\n\nspectrum\nProvides a choice between two spectrum diagnostics to detect seasonality or trading day effects.\n\n\n\ncheck\nProduce statistics for diagnostic checking of residuals from the estimated model.\n\n\n\n\n\nThe force and the composite spec are special-purpose specs. The former enforces the yearly totals of the seasonally adjusted series to be equal to those of the original series. The latter allows a comparison of indirect and direct seasonal adjustments. Table 3.3 gives an overview of the special-purpose specs.\n\n\nTable 3.3: Special purpose specs\n\n\n\n\n\n\n\nSpec name\nWhat it does\n\n\n\n\n\nforce\nAllow users to force yearly totals of the seasonally adjusted series to equal those of the original series for convenience.\nChapter 13\n\n\ncomposite\nObtaining both indirect and direct adjustments of a composite series.\nChapter 14\n\n\n\n\nFinally, a few specs are not covered in this book. Some of them are vintage specs that were important in earlier versions of X-13 but were superseded by other specs. It is generally recommended to use regression instead of x11regression and automdl instead of pickmdl. Other specs have a purely technical purpose. For example, the series spec provides X-13 with the data, starting date, and frequency. In R, this is handled by seasonal and will not be covered.\n\n\nTable 3.4: Vintage and technical specs that won’t be covered in this book)\n\n\n\n\n\n\nSpec name\nWhat it does\n\n\n\n\nx11regression\nAlternative to regression. Can only be used with X11.\n\n\npickmdl\nAlternative to automdl. Can only be used with X11.\n\n\nseries\nProvides X-13 with the data, the starting date and the frequency. In R, this is handled by seasonal and will not be covered.\n\n\nmetadata\nSpecification that allows users to insert metadata into the diagnostic summary file. In R, this is handled by seasonal and will not be covered."
  },
  {
    "objectID": "21-overview.html#main-user-choices",
    "href": "21-overview.html#main-user-choices",
    "title": "3  The fundamentals of X-13",
    "section": "3.6 Main user choices",
    "text": "3.6 Main user choices\nWhile we will cover each spec in more detail, this section provides a few examples of frequent user choices. As we saw in the previous chapter, by default, seasonal uses defaults that work well in many circumstances. The following is a non-exhaustive list of deviations from the defaults. The default options of seas() are listed as explicit arguments and are discussed in the arguments section of the help page of\n\n3.6.1 Using X11\nWhile seas() calls SEATS by default, X11 is often easier to use. To perform a seasonal adjustment on AirPassengers with X11, we need to activate the x11 spec.\n\nm_x11 <- seas(AirPassengers, x11 = \"\")\n\nAn empty string \"\" tells seas() to use the spec without an argument. Alternatively, you can also use an empty list, list(). If more than one mutually exclusive spec is included in seas(), specs are overwritten according to the priority rules shown in Table 3.5\n\n\nTable 3.5: If more than one mutually exclusive spec is included, specs are overwritten according to priority rules.\n\n\n\n\n\n\nProcedure\nPriority rules\n\n\n\n\nModel selection\n\narima\npickmdl\nautomdl\n\n\n\nAdjustment procedure\n\nx11\nseats\n\n\n\n\n\nThis is why the default SEATS procedure in the introductory example was overwritten by the specification of x11 = \"\".\n\n\n3.6.2 Turning off auto modeling\nBy default, the automdl spec finds a good ARIMA model. By specifying the model argument of the arima spec, the automated modeling is deactivated. Instead of the automatically chosen (0 1 1)0 1 1) ARIMA model, the following estimates an (1 1 0)1 1 0) model.\n\nm_arima <- seas(AirPassengers, arima.model = c(1, 1, 0, 1, 1, 0))\nsummary(m_arima)\n#> \n#> Call:\n#> seas(x = AirPassengers, arima.model = c(1, 1, 0, 1, 1, 0))\n#> \n#> Coefficients:\n#>                     Estimate Std. Error z value Pr(>|z|)    \n#> Weekday           -0.0029124  0.0004794  -6.076 1.23e-09 ***\n#> Easter[1]          0.0167907  0.0067080   2.503   0.0123 *  \n#> AO1951.May         0.0950587  0.0194363   4.891 1.00e-06 ***\n#> AR-Nonseasonal-01 -0.1078564  0.0871940  -1.237   0.2161    \n#> AR-Seasonal-12    -0.4588948  0.0790634  -5.804 6.47e-09 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (1 1 0)(1 1 0)  Obs.: 144  Transform: log\n#> AICc: 951.6, BIC: 968.1  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 35.88 . Shapiro (normality): 0.9937\n\n\n\n3.6.3 Turning off AIC testing and Outlier detection\nBy default, seas() evaluates the presence of weekday and Easter effects and checks for outliers in the data. Both can be turned off:\n\nm_no_auto <- seas(AirPassengers, regression.aictest = NULL, outlier = NULL)\nsummary(m_no_auto)\n#> \n#> Call:\n#> seas(x = AirPassengers, regression.aictest = NULL, outlier = NULL)\n#> \n#> Coefficients:\n#>                   Estimate Std. Error z value Pr(>|z|)    \n#> MA-Nonseasonal-01  0.40181    0.07887   5.095  3.5e-07 ***\n#> MA-Seasonal-12     0.55695    0.07626   7.304  2.8e-13 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 144  Transform: log\n#> AICc: 987.4, BIC: 995.8  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 28.04   Shapiro (normality): 0.9886  \n#> Messages generated by X-13:\n#> Warnings:\n#> - At least one visually significant trading day peak has been\n#>   found in one or more of the estimated spectra.\n\nIn practice, many spec argument combinations can be extracted via the static() functions, which will be demonstrated in the next chapter. Alternatively, the seasonalview package offers a graphical user interface that allows you to click various spec argument combinations.\nm <- seas(AirPassengers)\nview(m)\n\n\n\nManipulating spec argument combinations in the seasonalview graphical user interface"
  },
  {
    "objectID": "21-overview.html#references",
    "href": "21-overview.html#references",
    "title": "3  The fundamentals of X-13",
    "section": "3.7 References",
    "text": "3.7 References"
  },
  {
    "objectID": "22-transform.html#prior-modifications-and-transformations",
    "href": "22-transform.html#prior-modifications-and-transformations",
    "title": "4  Transform",
    "section": "4.1 Prior modifications and transformations",
    "text": "4.1 Prior modifications and transformations\nThe first is a prior modification. A prior modification scales each observation for known fixed effects. These effects can be well-known and established, such as the length of a period or leap-year effects, or they can be more subjective such as a modification for a workers’ strike. We will see how this comes into the regARIMA model in Chapter 5. We can think of prior-modification factors as events or corrections made to your data that are fixed throughout the adjustment process. These prior modification factors can also be permanent (default) or temporary. Permanent modifications are excluded from the final seasonal adjustment. Temporary modifications are removed while calculating seasonal factors but added back to the seasonally adjusted series.\nThe second type is a nonlinear transformation applied to the observations. This is typically a choice between logarithmic transform and no transformation but for modeling can be any power of the Box-Cox transformation.\n\nm_none <- seas(AirPassengers, transform.function = \"none\")\nm_log  <- seas(AirPassengers, transform.function = \"log\")"
  },
  {
    "objectID": "22-transform.html#additive-and-multiplicative-adjustment",
    "href": "22-transform.html#additive-and-multiplicative-adjustment",
    "title": "4  Transform",
    "section": "4.2 Additive and multiplicative adjustment",
    "text": "4.2 Additive and multiplicative adjustment\nAs you remember from @sec-introduction, Seasonal adjustment decomposes a time series into a trend, a seasonal, and an irregular component. Algebraically, the fundamental identity of seasonal adjustment looks like this:\n\\[Y_t = T_t + S_t + I_t. \\tag{4.1}\\]\nWe seek the decompose our observed series \\(Y_t\\) into a trend \\(T_t\\), a seasonal \\(S_t\\), and an irregular \\(I_t\\) component. The formulation above is additive, i.e., the trend, the seasonal, and the irregular component sum up to the observed series. The goal of seasonal adjustment is to subtract the seasonal component:\n\\[A_t = Y_t - S_t.\\]\nFor example, an observed value of 100 with a seasonal factor of 3.2 would result in a seasonally adjusted value of 100 - 3.2 = 96.8.\nAlternatively, the decomposition can be multiplicative:\n\\[Y_t = T_t \\cdot S_t \\cdot I_t \\tag{4.2}\\]\nI.e., the observed series is the product of the trend and the seasonal and irregular components. Since these are factors, the goal of seasonal adjustment is to remove seasonality by dividing by the seasonal factor.\n\\[A_t = \\frac{Y_t}{S_t}.\\]\nFor example, an observed value of 100 with a seasonal factor of 1.08 would result in a seasonally adjusted value of 100 / 1.08 = 92.59259. Hence for multiplicative models, values of \\(S_t > 1\\) decrease the observed value, and \\(S_t < 1\\) increase it. Keep this in mind when viewing seasonal factors such as in the function monthplot(m).\nFor a multiplicative adjustment, it is sufficient to take logarithms of the initial series and re-transform the results after the decomposition. The transform spec takes care of this."
  },
  {
    "objectID": "22-transform.html#model-choice",
    "href": "22-transform.html#model-choice",
    "title": "4  Transform",
    "section": "4.3 Model choice",
    "text": "4.3 Model choice\nX-13 has a built-in statistical test to decide between log and no transformation. The choice is made by comparing the AICc1 value of an ARIMA (0 1 1)(0 1 1) model fit, or a user-specified ARIMA model, to the log-transformed series and the original series.1 With small sample sizes, a standard AIC test may select models with too many parameters. AICc tackles this problem by correcting for sample size.\nFor most practical purposes, this is an effective choice and can be left to the program to decide. If your series has negative values, it can not be log-transformed, and automatic selection is performed. Other restrictions on the allowed transformations exist, but these situations are rare. We can look at the results of the transformation tests by looking at specific statistics. The udg() function provides access to a large number of diagnostical statistics.The qs() function and the AIC(), BIC() and logLik() methods are wrappers that use udg() to access some specific diagnostical statistics.\n\nm <- seas(AirPassengers)\nudg(m, c(\"aictest.trans.aicc.nolog\", \"aictest.trans.aicc.log\"))\n#> aictest.trans.aicc.nolog   aictest.trans.aicc.log \n#>                1021.1919                 987.3845\n\nWe see the AICc for log transformation is lower and hence selected. We saw this in ?sec-getting-started, were the summary of the seasonal object, summary(m), has told us that Transform: log. The same infor transformation can also be found in many other places such as the HTML output with out(m) or the udg with argument name aictrans such as udg(m, \"aictrans\").\n\n\n\n\n\n\nX-13 HTML Output\n\n\n\nX-13ARIMA-SEATAS has a built-in HTML output that offers an extensive summary of a seasonal adjustment process. In R, this can be accessed using the out() function. E.g.,\n\nout(m)\n\n\n\nThe choice between log and none changes the type of seasonal decomposition that will occur and, hence, your interpretation of the seasonal factors. With no transformation, X-13 will perform an additive seasonal adjustment specified in Equation 4.1. If log transformation is selected, X-13 will perform a multiplicative adjustment as specified in Equation 4.2."
  },
  {
    "objectID": "22-transform.html#transform-options",
    "href": "22-transform.html#transform-options",
    "title": "4  Transform",
    "section": "4.4 Transform options",
    "text": "4.4 Transform options\nThe transform spec controls these options. Some primary options within this spec are\n\n\n\n\n\n\n\n\n\nSpec option\nUse\nExample values\ndefault\n\n\n\n\ntransform.function\nTransform function\nnone, log, auto\nnone\n\n\ntransform.aicdiff\nadjust tolerance of AIC test for log transform\n0.0, 3.0, -4.5\n-2.0\n\n\nxtrans\nPrior adjustment factor\nseas(m, xtrans = y)\nNULL"
  },
  {
    "objectID": "22-transform.html#case-study-airpassengers",
    "href": "22-transform.html#case-study-airpassengers",
    "title": "4  Transform",
    "section": "4.5 Case Study: AirPassengers",
    "text": "4.5 Case Study: AirPassengers\nAn increasing variance, also known as heteroskadasticity is one sign of requiring a logarithmic transform. We have already seen that this is present in AirPassengers. Let’s verify that the automatic transformation identifies this.\n\ntransformfunction(m)\n#> [1] \"log\"\n\nThis is also a good place to get our first look at the seasonal factors. The monthplot() method offers a convenient way to look at these:\n\nmonthplot(m)\n\n\n\n\nLike the R base monthplot() function that can be applied on any time series (also on quarterly time series!), this groups time series data by months. If you look at the January (J), entry, the blue bars show the evolution of the detrended data from 1949 to 1960. The red bar shows the average seasonal factor over these years. The smooth red lines show the seasonal factors as estimated by the model.\nAs you can see from the plot, there are more passengers during the summer months and fewer in the winter. The seasonal factors change over time. The summer peak becomes more pronounced in later years, while the local peak in February and March disappears over time.\nIf you want to extract the seasonal factor directly into R, you can use the series() function:\nseries(m, \"seats.seasonal\")"
  },
  {
    "objectID": "22-transform.html#case-study-more-difficult-decision",
    "href": "22-transform.html#case-study-more-difficult-decision",
    "title": "4  Transform",
    "section": "4.6 Case Study: More difficult decision",
    "text": "4.6 Case Study: More difficult decision\nConsider the situation where you are trying to decide on transform choices for monthly retail grocery store data. The series grocery is part of the seasonalbook package.\n\nlibrary(seasonalbook)\nplot(grocery)\n\n\n\n\nVisual inspection of the series shows no immediate reason to think we need to perform a logarithmic transform. There is possible seasonal heteroskadasity which could be mitigated by taking logs. Perform an X-11 adjustment with all the defaults of seasonal\n\nm <- seas(grocery, x11 = \"\")\nudg(m, c(\"aictest.trans.aicc.nolog\", \"aictest.trans.aicc.log\"))\n#> aictest.trans.aicc.nolog   aictest.trans.aicc.log \n#>                 4202.960                 4201.042\n\nThis is interesting since the AICc for no transformation is lower than the AICc for log transform.\n\ntransformfunction(m)\n#> [1] \"log\"\n\nThe default value for transform.aicdiff is -2, meaning the program slightly prefers log transform, and the difference between the AICc values must exceed 2. In this situation, the difference between the AICc values is -1.917597. Suppose you were to change this option to transform.aicdiff = 0, then the program selects no transform.\n\nm2 <- seas(grocery, x11 = \"\", transform.aicdiff = 2)\ntransformfunction(m2)\n#> [1] \"none\""
  },
  {
    "objectID": "23-regARIMA.html#sarima-model",
    "href": "23-regARIMA.html#sarima-model",
    "title": "5  regARIMA Model",
    "section": "5.1 SARIMA model",
    "text": "5.1 SARIMA model\nAs the name implies, there are two components that one needs to understand when fitting a regARIMA model; namely regression and ARIMA. Furthermore, the ARIMA part is made up by a differencing order and the stochastic ARMA portion. In this chapter, we try to break these three components down to the most fundamental ingredients without an overly technical exposition. Essentially, providing readers with enough information about each topic to understand the rest of this book and go off and perform satisfactory seasonal adjustment. The interested reader is encouraged to find material devoted to each of these components separately to more fully understand them.\nARIMA is an acronym describing the three parts of the modeling paradigm. AR = autoregressive, I = integrated (differenced), and MA = moving average. The prefix auto or “self”, explains the AR portion perfectly. We model the current observation with lagged values from the past. This is illustrated with the classic autoregressive model of order 1:\n\\[ Y_t = \\phi Y_{t-1} + a_t \\]\nwhere \\(Y_t\\) is the observed time series, \\(\\phi\\) is a coefficient to be estimated and \\(\\{a_t\\}\\) is an uncorrelated sequence of errors similar to that of standard linear regression. This model is notated AR(1). If instead of a single lag we used \\(p\\) lags, the model would be and AR(\\(p\\)) and have structure:\n\\[ Y_t = \\phi_1 Y_{t-1} + \\phi_2 Y_{t-2} + \\cdots + \\phi_p Y_{t-p} + a_t \\]\nwhere now we have \\(p\\) coefficients \\(\\phi_1, \\phi_2, \\ldots, \\phi_p\\) to be estimated.\nThe moving average part of ARIMA model is similar in notation and reflects the number of lagged values of the error sequence should be included. For example, an MA(1) model with coefficient parameter \\(\\theta\\) is:\n\\[ Y_t = a_t + \\theta a_{t-1} \\].\nNote that instead of doing self-regression we include past values of the unobserved errors in the model at time \\(t\\). If instead of a single lag we wanted \\(q\\) lags of the past error terms, we would have an MA(\\(q\\)) model:\n\\[ Y_t = a_t + \\theta_1 a_{t-1} + \\theta_2 a_{t-2} + \\cdots + \\theta_q a_{t-q} \\].\nWhen we combine these two ideas we can model \\(Y_t\\) with \\(p\\) lagged values of itself together with \\(q\\) lagged values of the unobserved errors. Together it makes an ARMA(\\(p\\), \\(q\\)) model, one of the fundamental ingredients to the regARIMA model. For a practitioner the automatic modeling done in X13 is often sufficient to find an appropriate value for \\(p\\) and \\(q\\) and hence a well fitting ARMA model. If it more important from a seasonal adjustment perspective to correctly specify the differencing and regression variables in your overall regARIMA model."
  },
  {
    "objectID": "23-regARIMA.html#differencing",
    "href": "23-regARIMA.html#differencing",
    "title": "5  regARIMA Model",
    "section": "5.2 Differencing",
    "text": "5.2 Differencing\nARMA models work best for stationary time series. This means the mean does not depend on time (such as increasing trend) or have a correlation structure that changes. Many techniques could be used to take a non-stationary time series and transform it to stationarity, one ubiquitous method is differencing. There is a famous results that states if you difference your series \\(k\\) times it will remove a polynomial trend of degree \\(k\\). Essentially, if you observe a time series with a linear trend then first differencing will remove the trend. If a time series has quadratic trend (polynomial of order 2) then differencing twice will remove that trend. A similar phenomenon can happen at seasonal lags and often a time series will also require seasonal differencing to reduce it to stationary. The order of differencing, also called the intgreation order, for the non-seaosnal and seasonal parts of our model are usually notated as \\(d\\) and \\(D\\) respectively. When we bring the integration order together with the stocastic model specification we have the notation \\[\\text{SARIMA}\\underbrace{(p, d, q)}_{\\text{non-seasonal }}\\underbrace{(P, D, Q)}_{\\text{seasonal}}.\\] This can be seen easily with an example. Consider the log transformed AirPassengers series.\n\nplot(log(AirPassengers))\n\n\n\n\nWe see a clear increasing trend and seasonal pattern. Let’s call the observed series \\(X_t\\). We can difference the series to make \\(Y_t = \\Delta X_t = X_t - X_{t-1}\\). A plot of \\(Y_t\\) looks like\n\nplot(diff(log(AirPassengers)))\n\n\n\n\nThe trend has been removed however some seasonal trend (strong seasonal patterns) still exist. Apply seasonal differencing to the already first differenced series \\(Y_t\\):\n\\[ Z_t = Y_t - Y_{t-12} \\]\nA plot of \\(Z_t\\):\n\nplot(diff(diff(log(AirPassengers)), 12))\n\n\n\n\nHere we can see that both the original linear trend and seasonal pattern are removed and what is left is a stationary process that can adequately be modeled with an SARMA(0, 1)(0, 1) model. When you bring in the integration (differencing) order of one for the seasonal and non-seasonal components, we are left with the model named after this exact time series! The so called ``airline model’’ is the SARIMA(0, 1, 1)(0, 1, 1) and the terminology came to popularity via Box and Jenkins, “Time Series Analysis, Forecasting and Control” textbook."
  },
  {
    "objectID": "23-regARIMA.html#fitting-sarima-optional",
    "href": "23-regARIMA.html#fitting-sarima-optional",
    "title": "5  regARIMA Model",
    "section": "5.3 Fitting SARIMA (optional)",
    "text": "5.3 Fitting SARIMA (optional)\nHere we present a very oversimplied way to start to understand what values of \\(p, P, q\\) and \\(Q\\) you can investigate for your time series of interest. Recall that earlier it was mentioned that using automatic model identification is sufficient for most to get an adequate seasonal adjustment. Hence, this is simply for the interested reader to begin to gain additional intuition into the stochastic structures involved in their series and the types of structures the automatic modeling procedures look at. One of the main tools in a time series analyist tool box is the autocorrelation function (ACF). This is a function that returns the correlation between observations \\(h\\) time units apart throughout the entire sample. So for \\(h=2\\) this means looking at the correlation between the pairs \\((X_1, X_3), (X_2, X_4), (X_3, X_5), \\ldots\\). Then a way to build a SARIMA model is to match the sample ACF and the theoretical ACF of a given model. The main point distinguishing an AR(\\(p\\)) and MA(\\(q\\)) is how their theoretical ACF behaves. An AR(\\(p\\)) will have ACF the has exponential decay as \\(h\\) increases. For example, an AR(1) ACF is \\[\\rho(h) = \\phi^h\\] An MA(\\(q\\)) models ACF will be non-zero for the first \\(q\\) lags and then cutoff to zero thereafter. The ACF of an MA(1) is \\[\\rho(h) = \\begin{cases}\n~~1 & h = 0 \\\\\n\\frac{\\theta}{1 + \\theta^2} & h = 1 \\\\\n~~0 & \\text{otherwise}\n\\end{cases}\n\\] In practice of course the difference between decay and cut-off can be nebulous to detect but the interested reader is encouraged to explore the arima.sim() function the look at the sample ACF with the acf() function. As you increase the sample size it will converge to the theoretical ACF value and you can start to see the structures just discussed.\n\nx_AR <- arima.sim(model = list(ar = .75), n = 300)\nx_MA <- arima.sim(model = list(ma = .75), n = 300)\ntsbox::ts_plot(cbind(x_AR, x_MA))\nop <- par(mfrow = c(1, 2), mar = c(5, 2, 4, 2))\nacf(x_AR, xlab = \"h\", main = \"\"); title(\"ACF of AR(1) model\")\nacf(x_MA, xlab = \"h\", main = \"\"); title(\"ACF of MA(1) model\")\npar <- op"
  },
  {
    "objectID": "23-regARIMA.html#regression",
    "href": "23-regARIMA.html#regression",
    "title": "5  regARIMA Model",
    "section": "5.4 Regression",
    "text": "5.4 Regression\nWe have discussed SARIMA modeling (both the SARMA and differencing), now we see how exogenous regression variables come into play.\nThe regARIMA model takes the form \\[ f\\left(\\frac{Y_t}{D_t} \\right) = \\boldsymbol{\\beta}^\\prime {\\mathbf X}_t + Z_t .\\] Here \\(Y_t\\) is the observed time series. The function \\(f\\) represents a transformation, most commonly used is the log transform ie \\(f(x) = \\log(x)\\). \\(D_t\\) is any intervention that has taken place prior to any transformation or modeling. This intervention is usually subjective and customized for individual series on an as-needed basis. For example, if a soybean farmer strike occurred and the soybean export series suffered for its duration. This type of event might adversely affect the seasonal adjustment filters and automatic model identification routines and can be mediated as an initial step. If no transformation or intervention is needed the model form is: \\[ Y_t = \\underbrace{\\boldsymbol{\\beta}^\\prime {\\mathbf X}_t}_{\\text{Regression}} + \\underbrace{Z_t}_{\\text{ARIMA}} .\\]\nThe regression variables appear in the columns of the design matrix \\({\\mathbf X}_t\\) and \\(Z_t\\) is an ARIMA process. This last assumption on \\(Z_t\\) is what distinguished a regARIMA model from more classic linear models and multiple linear regression where error terms are assumed uncorrelated.\nIn order to achieve a suitable seasonal adjustment it is important to get the regARIMA model correct. For most dataset the built in automatic modeling features of the X13 program will be suitable to detect a reasonable model. This can be used as a starting point for more rigorous regARIMA model development or used as the final regARIMA modeling choice for your seasonal adjustment needs. We evoke automatic model identification through the XXX spec. The default behavior of the R seasonal package is XXX which includes automatic model identification.\n\n\n\n\n\n\nAutomatic and manual model choice\n\n\n\nAs an aside, the general rule is to not use automatic modeling in production. This mean, if you are going to include seasonal adjustment as part of a large scale data processing that occurs regularly (say monthly), then it is not advisable to have automatic model identification run every month. Instead, an alternative process, is to run automodel once and then fix the model choice in the XXX spec file. This does not need to be done manually since the static() function from the seasonal package can do this for you.\n\n\n\n\n\nOutlier Type\nAutomatic Detection Available?\n\n\n\n\nAdditive outliers (AO)\nYes (default)\n\n\nLevel shifts (LS)\nYes (default)\n\n\nTemporary level shifts (TL)\nYes\n\n\nTemporary changes (TC)\nNo\n\n\nRamps (RP, QI, QD)\nNo\n\n\nSeasonal outliers (SO)\nNo"
  },
  {
    "objectID": "23-regARIMA.html#case-study-airpassengers",
    "href": "23-regARIMA.html#case-study-airpassengers",
    "title": "5  regARIMA Model",
    "section": "5.5 Case Study: AirPassengers",
    "text": "5.5 Case Study: AirPassengers\nConsider the default seasonal adjustment:\n\nlibrary(seasonal)\nm <- seasonal::seas(AirPassengers, x11 = \"\")\nprint(m$spc$automdl)\n#> $print\n#> [1] \"bestfivemdl\"\nprint(m$spc$arima)\n#> NULL\n\nNotice the value NULL indicates no ARIMA model is specified and the returned arguments for the automdl spec indicate it is active during the X13 run.\n\nseasonal::udg(m, \"automdl\")\n#>          automdl \n#> \"(0 1 1)(0 1 1)\"\n\nIndicates that automatic modeling identified the (0 1 1)(0 1 1) model as the best choice. If we want to hardcode this model for subsequent runs, and turn off automatic model identification, this can be done via\n\nm_call <- seasonal::static(m)\n#> seas(\n#>   x = AirPassengers,\n#>   x11 = \"\",\n#>   regression.variables = c(\"td1coef\", \"easter[1]\", \"ao1951.May\"),\n#>   arima.model = \"(0 1 1)(0 1 1)\",\n#>   regression.aictest = NULL,\n#>   outlier = NULL,\n#>   transform.function = \"log\"\n#> )\nm2 <- eval(m_call)\n\nThere are many options you can modify when searching for outliers in your series. Some of the most practical options to start your exploration are the type, critical value and span that you would like to search.\nHere is an example of using span to limit the outlier search to the last few years of a series:\n\nm_span <- seas(AirPassengers,\n  outlier.types = c(\"ao\", \"ls\", \"tc\"),\n  outlier.critical = 4.0,\n  outlier.span = \"1958.jan, \")\nsummary(m_span)\n#> \n#> Call:\n#> seas(x = AirPassengers, outlier.types = c(\"ao\", \"ls\", \"tc\"), \n#>     outlier.critical = 4, outlier.span = \"1958.jan, \")\n#> \n#> Coefficients:\n#>                    Estimate Std. Error z value Pr(>|z|)    \n#> Weekday           -0.002644   0.000604  -4.377 1.20e-05 ***\n#> Easter[1]          0.021321   0.008395   2.540  0.01110 *  \n#> MA-Nonseasonal-01  0.235404   0.083756   2.811  0.00495 ** \n#> MA-Seasonal-12     0.543743   0.074644   7.284 3.23e-13 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 144  Transform: log\n#> AICc: 965.3, BIC: 979.2  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 28.26   Shapiro (normality): 0.9829 .\n\n\nm_nospan <- seas(AirPassengers,\n  outlier.types = c(\"ao\", \"ls\", \"tc\"),\n  outlier.critical = 4.0)\nsummary(m_nospan)\n#> \n#> Call:\n#> seas(x = AirPassengers, outlier.types = c(\"ao\", \"ls\", \"tc\"), \n#>     outlier.critical = 4)\n#> \n#> Coefficients:\n#>                     Estimate Std. Error z value Pr(>|z|)    \n#> Weekday           -0.0029497  0.0005232  -5.638 1.72e-08 ***\n#> Easter[1]          0.0177674  0.0071580   2.482   0.0131 *  \n#> AO1951.May         0.1001558  0.0204387   4.900 9.57e-07 ***\n#> MA-Nonseasonal-01  0.1156204  0.0858588   1.347   0.1781    \n#> MA-Seasonal-12     0.4973600  0.0774677   6.420 1.36e-10 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 144  Transform: log\n#> AICc: 947.3, BIC: 963.9  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 26.65   Shapiro (normality): 0.9908\n\nThe default critical value is set based on the length of the outlier span. Notice the MA-Nonseasonal-01 value when comparing m_span with m_nospan. We see the choice of span, and ultimately the choise to include an outlier in your model can have a dramatic effect on the estimated regARIMA parameters."
  },
  {
    "objectID": "24-x11.html#sec-seasonal-decomposition",
    "href": "24-x11.html#sec-seasonal-decomposition",
    "title": "6  X11",
    "section": "6.1 Seasonal decomposition",
    "text": "6.1 Seasonal decomposition\nAs we have seen in the previous chapters, the core of seasonal adjustment is the decomposition of a time series into a trend, a seasonal and and irregular component. Algebraically, we write the fundamental identity as:\n\\[\nX_t = T_t + S_t + I_t\n\\]\nwhere, \\(X_t\\) is the observed time series, \\(T_t\\) the trend, \\(S_t\\) the seasonal component and \\(I_t\\) the irregular component. Once the decomposition is done, the seasonally adjusted series can be computed as follows:\n\\[\nA_t =\n\\begin{cases}\nX_t - S_t \\qquad \\text{additive decomposition} \\\\\nX_t / S_t \\qquad \\text{multiplicative decomposition}\n\\end{cases}\n\\]\nHow to perform the seasonal decomposition? Ultimately, both X-11 and SEATS estimate the components \\(T_t\\), \\(S_t\\), \\(I_t\\) by passing moving average filters over the series. In order to get unbiased results at the margin, the underlying series is usually extended by forecasts from the regARIMA model discussed in the Chapter 5. This regARIMA model also serves as the foundation of the initial steps in the X11 algorithm to remove outliers and other regression effects before application of moving-averages.\nHow do we apply moving average filters over a series? The trend component can be estimated by applying a moving average over the observed series. For each point in time, an simple average that uses a certain number of observations both on the left and the right of the series. Because the window is symmetric, we need the series extended by forecasts and backcasts.\nOnce the trend component is computed, we can subtract it from the original series to compute a detrended series."
  },
  {
    "objectID": "24-x11.html#sec-simple-decomposition",
    "href": "24-x11.html#sec-simple-decomposition",
    "title": "6  X11",
    "section": "6.2 A simple decomposition in R",
    "text": "6.2 A simple decomposition in R\nIn order to better understand the X-11 method, it will be helpful to first perform a basic seasonal adjustment procedure “by-hand”. A basic trend filter could be a simple 2x12 moving average. This filter has weights 1/24, 1/12, 1/12, 1/12, 1/12, 1/12, 1/12, 1/12, 1/12, 1/12, 1/12, 1/12, 1/24. We use these weights to estimate the trend of the AirPassengers series.\n\nobserved <- AirPassengers         # the observed series\nfilter_trend = c(1/24, rep(1/12, 11), 1/24)     # a 2x12 symetric filter that uses 6 obs. on each side\ntrend = stats::filter(observed, filter = filter_trend, sides = 2)\ntsbox::ts_plot(observed, trend)\n\n\n\n\nAfter estimating the trend we now can estimate the seasonal component of the detrended series using a 3x3 seasonal filter that has weights (1,2,3,2,1)/9 applied to the same season.\n\ndetrended <- observed - trend\nfilter_seas = c(1, rep(0, 11), 2, rep(0, 11), 3, rep(0, 11), 2, rep(0, 11), 1) / 9\nseasonal = stats::filter(detrended, filter = filter_seas, sides = 2)\ntsbox::ts_plot(detrended, seasonal)\n\n\n\n\nBy subtracting this seasonal estimate we have our crude seasonal adjustment.\n\nadjusted = observed - seasonal\ntsbox::ts_plot(observed, adjusted)\n\n\n\n\nThis basic seasonal adjustment is a useful tool to understand other features of the X-13A-S program. The most obvious thing we see in this plot is the last of seasonal adjustment at the ends of the series. Hence, why we need to use RegARIMA modeling to forecast extend. Additionally, we see some obvious flaws this this adjustment. It is difficult to estimate a trend in the presence of seasonality. Similarly, it is difficult to estimate the seasonal factors when the trend is poorly estimated/removed.\nThis motivates the X-11 method which is an iterative application of this simple procedure we have just performed. Each subsequent iteration allows the estimated components to be refined by selecting better filters and handling extreme values and regression effects. The first adaptation is to consider a transformation of our series from AirPassengers to log(AirPassengers). Our simple example performed an additive seasonal adjustment. This transformation will require a move to a multiplicative decomposition."
  },
  {
    "objectID": "24-x11.html#x-11-adjusment",
    "href": "24-x11.html#x-11-adjusment",
    "title": "6  X11",
    "section": "6.3 X-11 Adjusment",
    "text": "6.3 X-11 Adjusment\nFIXME a few lines of history.\nIn order to use symmetric moving average filters at the end of the time series (current value), a regARIMA model is used to forecast extend the series. This RegARIMA model is where users can test for or specify outliers, trading day and moving holiday regressors in their adjustment. The forecast extended series is then used to filter.\nAdditionally, X-11 has a built in extreme value procedure included. This procedure identifies extremes and replaces. This results in a robust procedure that can automatically choose filters and identify extreme values without much user intervention. All that needs to be evoked beyond the default seas() call is to turn on the X11 spec option.\n\nm <- seas(AirPassengers, x11 = \"\")\nsummary(m)\n#> \n#> Call:\n#> seas(x = AirPassengers, x11 = \"\")\n#> \n#> Coefficients:\n#>                     Estimate Std. Error z value Pr(>|z|)    \n#> Weekday           -0.0029497  0.0005232  -5.638 1.72e-08 ***\n#> Easter[1]          0.0177674  0.0071580   2.482   0.0131 *  \n#> AO1951.May         0.1001558  0.0204387   4.900 9.57e-07 ***\n#> MA-Nonseasonal-01  0.1156204  0.0858588   1.347   0.1781    \n#> MA-Seasonal-12     0.4973600  0.0774677   6.420 1.36e-10 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> X11 adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 144  Transform: log\n#> AICc: 947.3, BIC: 963.9  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 26.65   Shapiro (normality): 0.9908  \n#> Messages generated by X-13:\n#> Warnings:\n#> - Visually significant seasonal and trading day peaks have\n#>   been found in one or more of the estimated spectra.\n\nBefore further discussion about the details of the X-11 process, let us see what happened during this modeling run. A variant of the simple decomposition performed in Section Section 6.2 is run 3 times along with a preprocessing step to fit a regARIMA model. This proceedure can be seen in great detail in (Ladiray and Quenneville). The overview of each step\n\n(Part A) Prior adjustments including regARIMA modeling of outliers, trading day and moving holiday effects.\n(Part B) First application of seasonal decomposition. Calculate initial extreme value weights.\n(Part C) Second estimation of seasonal and trend. Final estimation of extreme value weights.\n(Part D) Final estimation of seasonally adjusted series, seasonal factors, trend, irregular. Combined factors incorporate the trading day and moving holiday regression effects estimated in Part A\n\n\n\n\n\n\n\nOutliers vs Extreme values\n\n\n\nFirst note that we discuss extreme values later in this Chapter of the book. Outliers are a more substantial topic and a later chapter is reserved for their discussion.\nThe terms outlier and extreme value seem interchangeable. In the X-13ARIMA-SEATS program these refer to very different types of effects. An outlier is identified by the regARIMA model in Part A of the X-11 method. An extreme value is a value that is large enough to effect the results of a moving-average filter but is not identified by the regARIMA automatic modeling identification. Outliers are prior-adjusted out of the series while extreme values are replaced within the X-11 procedure.\nBoth types end up in the seasonally adjusted series. Extreme values are assigned to the irregular component and are hence included in the seasonally adjusted series. Outliers get included in Part D when X-11 calculates the final seasonal factors using the original series including outlier effects.\n\n\nDuring these steps the trend filter is automatically chosen based the noise-to-signal ratios, labeled I/C in the output file. The seasonal moving average is determined by the Global Moving Seasonality Ratio (GMSR). Being able to understnad the\nWhen using the x11 spec you can change the length of the filter used for the trend and seasonal components with the trendma and seasonalma arguments respectively. Additionally, sigmalim will control the amount of extreme value adjustment that is done during the seasonal adjustment."
  },
  {
    "objectID": "24-x11.html#frequency-domain-of-time-series-optional",
    "href": "24-x11.html#frequency-domain-of-time-series-optional",
    "title": "6  X11",
    "section": "6.4 Frequency domain of time series (Optional)",
    "text": "6.4 Frequency domain of time series (Optional)\nWe present the following as optional reading material. For those interesting in simply performing seasonal adjustment, an understanding of the frequency domain of a time series, is not manditory. However, the spectral domain representation will help the interested reader further understand the impact a linear filter has on a time series. Since both X-11 and SEATS use linear filters this will deepen the users understanding of whichever seasonal adjustmnet proceedure is choosen.\nSeasonal adjustment is highly motivated by the study, estimation, and ultimately removal of regular fulutions in a time series. The words regular fluctuations immediately leads us to trigonomic functions sin and cos. It turns out, there exist two equivilant representations of a time series. The first, and usually easier for beginners to understand, is the time domain representation. This is expressing how \\(X_t\\) evolves as time \\(t\\) evolves. For example, an MA(1) time domiain representation is: \\[X_t = w_t + \\theta w_{t-1}\\] The second, is a frequency domain representation of a series. Here, \\(X_t\\) is represented as the sum of trigonometric functions. More specifically, the spectral density of \\(X_t\\) is the fourier transform of the acf of the series. \\[f_X(\\nu) = \\sum_{h = - \\infty}^{\\infty} \\gamma(h) e^{-2\\pi i \\nu h}\\] For example, the spectral density of an MA(1) is: \\[f_X(\\nu) = \\sigma^2 \\left( 1 + \\theta^2 + 2\\theta\\cos(2\\pi\\nu) \\right)\\] The important concept here is to understand that these representations are equivalent; meaning they contain the same information about a time series, such as encoding the acf function.\n\n\n\n\n\n\nWhere does the term ``White Noise’’ come from?\n\n\n\nThe spectral density of an uncorrelated sequence with variance \\(\\sigma^2\\) is simply \\(f(\\nu) = \\sigma^2\\). Notice this is not a function of any frequencies but just a constant for any \\(\\nu\\). Hence, it is a stochastic process that equally weight all frequencies in the spectrum. This is precisely where the names white noise comes from as white light has the same property of reflecting all color bands equally, combining to produce white light.\n\n\nNow that we know we can express a time series either in the time domain or as a sum of sin and cosine curves, we get to the important part for seasonal adjustment - how does a linear filter effect the input series? Assume we want to pass a moving-average linear filter over our data \\(X_t\\) with weights \\(\\ldots, w_{-2}, w_{-1}, w_{0}, w_{1}, w_{2}, \\ldots\\). Assume the output of the linear filter will be \\(Y_t\\) such that \\[Y_t = \\sum_{j = -\\infty}^{\\infty} w_j X_{t+j} =\n\\ldots + w_{-2}X_{t-2} + w_{-1}X_{t-1} +  w_{0}X_{t} + w_{1}X_{t+1} + w_{2}X_{t+2} + \\ldots\\] This type of linear filter can be expressed as a linear operator in terms of the backshift operator \\(B\\) , where \\(BX_t = X_{t-1}\\) and \\(B^{-1}X_t = X_{t+1}\\). \\[W(B) = \\ldots + w_{-2}B^2 + w_{-1}B +  w_{0} + w_{1}B^{-1} + w_{2}B^{-2} + \\ldots\\] and hence \\(Y_t = W(B)X_t\\). We can now express the spectral density of \\(Y_t\\) in terms of the input spectral density \\(X_t\\). \\[f_Y(\\nu) = \\underbrace{\\lvert W(e^{2\\pi i \\nu}) \\rvert^2}_{\\text{Square Gain Function}} f_X(\\nu)\\]. There is some mathematical machinery needed when understanding exactly what the square-gain function, \\(\\lvert W(e^{2\\pi i \\nu}) \\rvert^2\\), is. However, for the sake of this text we just know that it tells us exactly the frequencies of \\(X_t\\) that amplified in the output \\(Y_t\\) as well as the frequencies of \\(X_t\\) that will be annihilated (when the square-gain function equals 0).\nLet’s look at an example spectrum for the airline model. Instead of deriving the result, the following code simulates observations from an airline model with \\(\\theta = .5\\) and \\(\\Theta = .9\\). The spectrum is then estimated using a parametric estimator using the spec.ar function. Details of this estimation can be found in (Brockwell and Davis).\n\nlibrary(forecast)\n#> Warning: package 'forecast' was built under R version 4.1.2\n#> Registered S3 method overwritten by 'quantmod':\n#>   method            from\n#>   as.zoo.data.frame zoo\nmodel <- Arima(y = ts(rnorm(10000),freq=12), \n               order=c(0,1,1), \n               seasonal=c(0,1,1),\n               fixed=c(theta=-0.5, Theta=-0.9))\nx <- simulate(model, nsim=1000)\nspec.ar(x)\n\n\n\n\n\nx_trend = stats::filter(x, filter = filter_trend, sides = 2)\nspec.ar(x_trend, na.action = na.pass)\n\n\n\n\n\nx_detrend = x - x_trend\nspec.ar(x_detrend, na.action = na.pass)"
  },
  {
    "objectID": "24-x11.html#x-11-moving-average-filters",
    "href": "24-x11.html#x-11-moving-average-filters",
    "title": "6  X11",
    "section": "6.5 X-11 Moving average filters",
    "text": "6.5 X-11 Moving average filters\nWe introduce the moving average filters and subsequently plot the filter weights along with the values of the squared gain function. The X11 spec also allows users to control the length of the trend and seasonal moving average filters used during the adjustment. Generally speaking, longer filters imply a more stable seasonal component and shorter filters a more changing seasonal pattern. Of course, a longer filter will use more data for the calculation of components at each time point. This is an important observation and understanding it might help a user decide on a short or long filter. Since longer filters use more data there tend to be smaller revisions when a new data point is added. However, there will be revisions to data values further back.\nA shorter filter is just the opposite, they tend to produce larger revisions but they do not extend as far back into the series. If a filter is not choosen by the user then automatic filter selection is used. To understand the length of a filter let’s look at the (finite) number of choice available in during an x11 adjustment. Table 6.1 shows the different filters available for the seasonal component and the trend component.\n\n\nTable 6.1: Filters available in X11\n\n\n\n\n\n\nValue\nDescription\n\n\n\n\ns3x1\n3×1 moving average\n\n\ns3x3\n3×3 moving average\n\n\ns3x5\n3×5 moving average\n\n\ns3x9\n3×9 moving average\n\n\ns3x15\n3×15 moving average\n\n\nstable\nStable seasonal filter. A single seasonal factor for each calendar month or quarter is generated by calculating the simple average of all the values for each month or quarter (taken after detrending and outlier adjustment).\n\n\nx11default\nA 3×3 moving average is used to calculate the initial seasonal factors in each iteration, and a 3×5 moving average to calculate the final seasonal factors."
  },
  {
    "objectID": "24-x11.html#extreme-value",
    "href": "24-x11.html#extreme-value",
    "title": "6  X11",
    "section": "6.6 Extreme value",
    "text": "6.6 Extreme value\nThe X11 method is sensitive to outliers. Beyond the specified regressors (AOs, level shifts, temporary changes, etc), an X11 adjustment will replace extreme values after the initial crude trend estimation occurs in the first iteration of the X11 method. The replacement procedure looks as follows:\n\n\n\n\n\nflowchart LR\n    A(  Estimate standard deviation <br> of irregular, s  )-->B(Compare SI-ration to <br> multiples of s)\n    B-->C(SI < 1.5 * s)\n    B-->D(1.5 * s < SI < 2.5 * s)\n    B-->E(SI > 2.5 * s)\n    C --> F(SI unchanged)\n    D --> G(SI linearly weighted)\n    E --> H(SI fully weighted)\n\n\n\n\n\nFigure 6.1: Default behavior of Extreme value replacement procedure.\n\n\n\n\nUsers can change the multiples of \\(\\sigma\\) that are converted to extreme values. This is done with the sigmalim option within the x11 spec. This option should be a vector of length 2 that specifies when weighting should begin and when full weight of zero should be applied. Between the endpoints of the specified vector a linear weight will be applied. SI ratios are replaced with an average of the two nearest SI ratios from the same month/quarter. One caveat being that only fully weighted SI ratios are used for SI ratio replacement. Hence, if too small of a \\(\\sigma\\) limit is used the SI ratios used to replace an extreme value should be many years away.\n\nm = seas(AirPassengers, x11 = \"\")\nunmodified_SIratio <- series(m, \"d8\")\nmodified_SIratio   <- series(m, \"d9\")\nseasonal_factors <- series(m, \"d10\")\ntsbox::ts_dygraphs(cbind(unmodified_SIratio, modified_SIratio, seasonal_factors))\n\n\n\n\n\n\nm = seas(AirPassengers, x11 = \"\", x11.sigmalim = c(1, 2))\nunmodified_SIratio <- series(m, \"d8\")\nmodified_SIratio   <- series(m, \"d9\")\nseasonal_factors <- series(m, \"d10\")\ntsbox::ts_dygraphs(cbind(unmodified_SIratio, modified_SIratio, seasonal_factors))\n\n\n\n\n\nIt should be noted that extreme value choices can greatly affect the seasonal adjustment.\n\n\n\n\n\n\nSI ratio / SI difference\n\n\n\nIn a multiplicative adjustment, the detrended series is called the SI ratio. It is an estimate of the seasonal component. The SI ratio is used to identify extreme values during the initial and intermediate steps of the X-11 method."
  },
  {
    "objectID": "24-x11.html#additive-and-multiplicative-again",
    "href": "24-x11.html#additive-and-multiplicative-again",
    "title": "6  X11",
    "section": "6.7 Additive and multiplicative (again)",
    "text": "6.7 Additive and multiplicative (again)\nThe X-13ARIMA-SEATS development was highly motivated to study economic time series. As such, the default seasonal adjustment mode is multiplicative due to most seasonal economic time series displaying seasonal fluctuations that increase and decrease along with the level of the time series.\nIf your series does not have this feature then additive adjustment might be more appropriate. This can be changed in the mode argument of the x11 spec. For example, seas(x, x11.mode = 'add') will perform an additive x11 run. There exist two other models for decomposition, pseudo-additive and log additive. These are less common than additive and multiplicative models and are not the focus of this text. If your series has some extremely small values in certain months (quarters) then pseudo-additive models could be worth further investigation. It has been observed that when multiplicative seasonal adjustment produces more extreme values in conjunction with small seasonal factors then pseudo-additive adjustment should be explored. NEED TO SHOW USERS HOW TO VIEW THEIR EXTREME VALUES - D8.B TABLE DESIGNATIONS NEXT TO OBSERVATIONS. A good reference on the subject is Baxter (1994)."
  },
  {
    "objectID": "24-x11.html#case-study",
    "href": "24-x11.html#case-study",
    "title": "6  X11",
    "section": "6.8 Case study",
    "text": "6.8 Case study\n\ntsbox::ts_plot(\n  s3x1 = predict(seas(AirPassengers, x11.seasonalma = \"s3x1\")),\n  s3x15 = predict(seas(AirPassengers, x11.seasonalma = \"s3x15\"))\n)"
  },
  {
    "objectID": "24-x11.html#points-to-include-in-chapter",
    "href": "24-x11.html#points-to-include-in-chapter",
    "title": "6  X11",
    "section": "6.9 Points to include in Chapter",
    "text": "6.9 Points to include in Chapter\n\nLevel shifts are included with the trend component while AOs and extreme values are included in the irregular.\nChanging filters can affect which values are extreme\nChanging sigma limits changes the extreme values and can affect what filter seems most appropriate\n\nExperiment with changing filters and sigma limits for your series to see the results"
  },
  {
    "objectID": "25-seats.html#model-based-decomposition",
    "href": "25-seats.html#model-based-decomposition",
    "title": "7  SEATS",
    "section": "7.1 Model based decomposition",
    "text": "7.1 Model based decomposition\nSignal Extraction in ARIMA Time Series, or SEATS, is a method for estimating unobserved components in a time series. It is developed from the work of Cleveland and Tiao (1976), Hillmer and Tiao (1982), Maravall (1986). If applied properly, SEATS seasonal factors are usually more stable than X-11, and the seasonally adjusted series show less revisions than X11 (??) (see final section for a more extensive discussion).\n\nCleveland, William P, and George C Tiao. 1976. “Decomposition of Seasonal Time Series: A Model for the Census x-11 Program.” Journal of the American Statistical Association 71 (355): 581–87.\n\nHillmer, S. C., and G. C. Tiao. 1982. “An ARIMA-Model-Based Approach to Seasonal Adjustment.” Journal of the American Statistical Association 77 (377): 63–70. http://www.jstor.org/stable/2287770.\n\nMaravall, Agustin. 1986. “Revisions in ARIMA Signal Extraction.” Journal of the American Statistical Association 81 (395): 736–40. http://www.jstor.org/stable/2289005.\nLike X-11, SEATS applies a series of filters to an observed time series, as described in Section 6.1. Like X-11, SEATS uses a forecast extended series, in order to obtain unbiased results at the margin.\nUnlike X-11, however, SEATS filters are derived from the ARIMA model of the time series. While X-11 filters are predefined and fixed, the SEATS filters are different for each ARIMA model.\n\n\n\n\n\n\nX-11 Filter\n\n\n\n\nfinite set of empirically developed moving average filters\nfixed filtering seen as easier to use (less statistical machinery)\n\n\n7.1.0.1 SEATS filters\n\nspecifies stochastic models for unobserved components\nderives seasonal adjustment filters from these models\ninfinite number of possible filter choices\nrequires more statistical machinery\n\n\n\n\nGiven a certain ARIMA model (such as the “Airline” (0 1 1)(0 1 1) model which is appropriate for the description of the AirPassengers time series), SEATS decomposes the model into separate models for the trend, the seasonal and the irregular component. This is done by the canonical decomposition derived by Pierce, Box-Hillmer, Tiao and Burman [FIXME] and will be discussed in section (FIXME).\nThe decomposition of the ARIMA model is independent of the data. For each ARIMA specification, there is a unique canonical decomposition. Some decompositions for common ARIMA models are given in table [FIXME, e.g. (011)(011) -> ??? ???].\nThe decomposed ARIMA models imply a certain filter, which is derived by the WK procedure. The filters depend on the parameters of the original arima models. Figure FIXME displays the SEATS filters for an (0 1 1)(0 1 1) model, for various values of theta."
  },
  {
    "objectID": "25-seats.html#comparing-seats-with-x-11-filters",
    "href": "25-seats.html#comparing-seats-with-x-11-filters",
    "title": "7  SEATS",
    "section": "7.2 Comparing SEATS with X-11 filters:",
    "text": "7.2 Comparing SEATS with X-11 filters:\nIf SEATS and X-11 use similar filters, the final adjustment will be similar. Using the default arguments of seas() on AirPassengers, the adjustment is very similar:\n\nseats <- seas(AirPassengers)\nx11 <- seas(AirPassengers, x11 = list())\n\ntsbox::ts_plot(final(seats), final(x11))\n\n\n\n\nIf we look at the applied filters, we see that FIXME.\nOthers have looked at comparing SEATS and X-11 filters. In Planas and Depoutot (2002) they show with X11 seasonal filter that is closest to an implied Airline SEATS model based on the \\(\\Theta_{12}\\)\n\n\n\nFilter\nSeasonal MA\n\n\n\n\n3x3\n0.364 - 0.400\n\n\n3x5\n0.543-0.563\n\n\n3x9\n0.723-0.732\n\n\n3x15\n0.824-0.828"
  },
  {
    "objectID": "25-seats.html#transitory-component-later-more-optional",
    "href": "25-seats.html#transitory-component-later-more-optional",
    "title": "7  SEATS",
    "section": "7.3 Transitory component [Later, more optional]",
    "text": "7.3 Transitory component [Later, more optional]\nSometimes SEATS includes a transitory component in its decomposition:\n\\[ X_t = T_t + S_t + R_t + u_t \\]\nThe transitory component captures short, erratic behavior that is not white noise, sometimes associated with awkward frequencies.\n\nThe variation from the transitory component should not contaminate the trend or seasonal, and removing it allows SEATS to obtain smoother, more stable trends and seasonal components.\nIn the final decomposition, the transitory and irregular components are usually combined.\nSEATS does not always estimate a transitory component"
  },
  {
    "objectID": "25-seats.html#quick-refresher-on-arima-models-and-notation",
    "href": "25-seats.html#quick-refresher-on-arima-models-and-notation",
    "title": "7  SEATS",
    "section": "7.4 Quick refresher on ARIMA models and notation",
    "text": "7.4 Quick refresher on ARIMA models and notation\nThe remaining of the SEATS section will heavily rely on the autoregressive and moving-average operators \\(\\phi(B)\\) and \\(\\theta(B)\\) where \\(B X_t = X_{t-1}\\).\nIf \\(X_t\\) follows and ARIMA(\\(p\\), \\(d\\), \\(q\\)) model: \\[\n\\phi(B) X_t = \\theta(B) a_t\n\\]\n\\[\n(1 - \\phi_1 B - \\cdots - \\phi_p B^p)(1-B)^d X_t = (1 + \\theta_1 B + \\cdots \\theta_q B^q) a_t\n\\]\nFor example, in an ARIMA(2,0,1) we are modeling \\(X_t\\) as:\n\\[\nX_t = \\phi_1 X_{t-1} + \\phi_2 X_{t-2} + a_t + \\theta_1 a_{t-1}\n\\]\nand all model information is contained in \\(\\phi(B)\\) and \\(\\theta(B)\\). Moreover, for any specified \\(\\phi(B)\\) and \\(\\theta(B)\\) that satisfy certain causality criteria there exists a unique Wold decomposition \\[\n\\phi(B) X_t = \\theta(B) a_t  \n\\]\n\\[\nX_t = \\frac{\\theta(B)}{\\phi(B)} a_t = \\Psi(B) a_t = \\sum_{k=0}^{\\infty} \\psi_k a_{t-k}\n\\]"
  },
  {
    "objectID": "25-seats.html#seats-assumptions",
    "href": "25-seats.html#seats-assumptions",
    "title": "7  SEATS",
    "section": "7.5 SEATS Assumptions",
    "text": "7.5 SEATS Assumptions\n\nThe linearized series can be represented by an ARIMA model which captures the stochastic structure of the series (Linearized series = series with regression effects removed)\nAfter differencing each with the ARIMA’s differencing polynomial, the components are orthogonal (uncorrelated)\n\nSEATs decomposes the autoregressive polynomial by its roots associating them with different latent components. For example, roots near seasonal frequencies are associated with the seasonal component and roots near zero are associated with the trend component. \\[\n\\phi(B) = \\phi_T(B) \\cdot \\phi_S(B) \\cdot \\phi_R(B).\n\\]\nHence we have, \\[\nX_t =\n\\frac{\\theta(B)}{\\phi(B)} a_{t} =\n\\frac{\\theta_T(B)}{\\phi_T(B)} a_{T,t} +\n\\frac{\\theta_S(B)}{\\phi_S(B)} a_{S,t}  +\n\\frac{\\theta_R(B)}{\\phi_R(B)} a_{R,t}  + u_t\n\\]\nIf the spectra of all components in non-negative the decomposition is admissible, SEATS finds admissible models for components \\[ \\phi_T(B) T_t = \\theta_T(B) a_{T, t} \\] \\[ \\phi_S(B) S_t = \\theta_S(B) a_{S, t} \\] \\[\\phi_R(B) R_t = \\theta_R(B) a_{R, t} \\] Problem: Infinite number of models that yield the same aggregate. The choices differ in how white noise is allocated among the components. Solution: Canonical Decomposition: SEATS uses the method of Pierce, Box-Hillmer, Tiao and Burman:\n\nPut all the white noise into the irregular components\nMaximize the variance of the irregular\nMinimizes the variance of the stationary transforms of the other components\n\nThis is called the Canonical Decomposition. We already stated that both X-11 and SEATS estimate the unobserved components by passing a moving-average filter over the observed data. So how do we use these implied component models to get a linear filter? It should be clear that the filter weights will depend on that arima model is picked \\(X_t = \\Psi(B) a_t\\), and what the implied seasonal model, \\(\\phi_S(B) S_t = \\theta_S(B) a_{S,t} \\Rightarrow S_t = \\Psi(B) a_t\\), is. The Wiener-Kolmogorov (WK) algorithm outlines the methodology to get the so-called WK filter. This is the filter that is equal to the conditional expectation of the seasonal component conditional on the observed series.\n\n\\[\\widehat{S}_t = \\underbrace{\\left[ \\frac{\\Sigma_S}{\\Sigma} \\frac{\\Psi_S(B)\\Psi_S(F)}{\\Psi(B)\\Psi(F)} \\right]}_{\\mbox{WK filter weights}} X_t\\] where \\(F=B^{-1}\\) if the forward shift operator such that \\(F X_t = X_{t+1}\\).\nMore than other coefficients, the seasonal MA (\\(\\theta_{12}\\)) influences whether estimated seasonal factors change either slowly over time (\\(\\theta_{12}\\) close to 1) or rapidly over time (\\(\\theta_{12}\\) close to zero)."
  },
  {
    "objectID": "25-seats.html#example-seats-adjustment",
    "href": "25-seats.html#example-seats-adjustment",
    "title": "7  SEATS",
    "section": "7.6 Example SEATS adjustment",
    "text": "7.6 Example SEATS adjustment"
  },
  {
    "objectID": "25-seats.html#some-existing-studies-and-conclusions",
    "href": "25-seats.html#some-existing-studies-and-conclusions",
    "title": "7  SEATS",
    "section": "7.7 Some existing studies and conclusions",
    "text": "7.7 Some existing studies and conclusions\nThe Bureau of Labor Statistics formed a group to do a comparison study between X-11 and model-based seasonal adjustments (CITE BLS 2007). The examined a cross section of 87 BLS series with X-11, SEATS, and STAMP using spectral, revisions history, model adequacy and sliding spans diagnostics. They found that SEATS seasonal factors are usually more stable than X-11 and X-11 trend component is usually more stable than SEATS. Also, among series that were seasonal, residual seasonality almost never appears using either method. The only exception being a small number of SEATS runs where model inadequacy for the full span of data was present. This manifested as SEATS having difficulty identifying a usable model for decomposition and falling back on the airline model. They found even in these situations the SEATS seasonal adjustment is usually reasonable.\nOverall, X-11 and SEATS seasonal adjustments are very similar for many series. SEATS adjustments are often smoother than X-11 seasonal adjustments. For some series, the variance can be different based on the month or season. For example, U.S. Housing Starts is more variable in the winter months than in the summer due to the differences in warm and cold winters. ARIMA model-based seasonal adjustment does not handle this situation very well and assumes a constant variance and the SEATS adjustment wont compensate for this."
  },
  {
    "objectID": "30-part-data-problems.html",
    "href": "30-part-data-problems.html",
    "title": "Data Problems",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\nIn part III we look at more in-depth at practical issues with seasonal adjustment. The focus is on concrete solutions to each situation presented. Each subsection will prominently feature a case study dedicated to each problem."
  },
  {
    "objectID": "31-holidays.html#why-should-we-adjust-for-holiday-effects",
    "href": "31-holidays.html#why-should-we-adjust-for-holiday-effects",
    "title": "8  Irregular holidays",
    "section": "8.1 Why should we adjust for holiday effects",
    "text": "8.1 Why should we adjust for holiday effects"
  },
  {
    "objectID": "31-holidays.html#easter-adjustments",
    "href": "31-holidays.html#easter-adjustments",
    "title": "8  Irregular holidays",
    "section": "8.2 Easter Adjustments",
    "text": "8.2 Easter Adjustments"
  },
  {
    "objectID": "31-holidays.html#case-study-chinese-new-year",
    "href": "31-holidays.html#case-study-chinese-new-year",
    "title": "8  Irregular holidays",
    "section": "8.3 Case Study: Chinese New Year",
    "text": "8.3 Case Study: Chinese New Year\nThe Lunar New Year is the most important holiday in China and many other Asian countries. Traditionally, the holiday starts on Lunar New Year’s Eve, and lasts to the Lantern Festival on the 15th day of the first month of the lunisolar calendar. The Chinese New Year is celebrated either in January or in February of the Gregorian calendar.\nBecause of its importance, Chinese New Year seriously distorts monthly time series, which are usually reported according to the Gregorian calendar. Unlike Easter, Chinese New Year does not affect quarterly time series, as it always falls in the first quarter.\nX-13-ARIMA-SEATS has a built-in adjustment procedure for Easter holiday, but not for Chinese New Year. However, all packages allow for the inclusion of user-defined variables, and the Chinese New Year can be modeled as such.\nWith the R package seasonal, generating and including such a series is easy. We will use it in the following to seasonally adjust and remove Chinese New Year effects from the nominal dollar value of imports to China. seasonal is an interface to X-13ARIMA-SEATS; for more information and installation details, see here.\n\n8.3.1 Imports of Goods to China\nChinese imports are included as an example series in seasonal, both with and without the official seasonal adjustment.\n\nlibrary(tsbox)\nlibrary(seasonal)\nlibrary(tidyverse)\n#> ── \u001b[1mAttaching packages\u001b[22m ──────────────────────────────────── tidyverse 1.3.1 ──\n#> \u001b[32m✓\u001b[39m \u001b[34mggplot2\u001b[39m 3.3.5     \u001b[32m✓\u001b[39m \u001b[34mpurrr  \u001b[39m 0.3.4\n#> \u001b[32m✓\u001b[39m \u001b[34mtibble \u001b[39m 3.1.4     \u001b[32m✓\u001b[39m \u001b[34mdplyr  \u001b[39m 1.0.7\n#> \u001b[32m✓\u001b[39m \u001b[34mtidyr  \u001b[39m 1.1.3     \u001b[32m✓\u001b[39m \u001b[34mstringr\u001b[39m 1.4.0\n#> \u001b[32m✓\u001b[39m \u001b[34mreadr  \u001b[39m 2.0.1     \u001b[32m✓\u001b[39m \u001b[34mforcats\u001b[39m 0.5.1\n#> ── \u001b[1mConflicts\u001b[22m ─────────────────────────────────────── tidyverse_conflicts() ──\n#> \u001b[31mx\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mfilter()\u001b[39m masks \u001b[34mstats\u001b[39m::filter()\n#> \u001b[31mx\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mlag()\u001b[39m    masks \u001b[34mstats\u001b[39m::lag()\n#> \u001b[31mx\u001b[39m \u001b[34mtibble\u001b[39m::\u001b[32mview()\u001b[39m  masks \u001b[34mseasonal\u001b[39m::view()\nimp_cn <- imp\nts_plot(imp_cn)\n\n\n\n\nThe series has a very different seasonal pattern before 2000, we focus on the later period. (Adjusting the whole series in one step is possible, but for good results one should manually model the seasonal break.)\n\nimp_cn_2000 <- ts_span(imp_cn, start = 2000)\n\nts_dygraphs() works similar to ts_plot(), but allows for zooming:\n\nts_dygraphs(imp_cn_2000)\n\n\n\n\n\n\n\n\n\n\n\nHow to read data from FRED into R\n\n\n\n{fredr} provides access to the Federal Reserve of Economic Data (FRED), provided by the Federal Reserve Bank of St. Louis. To use fredr and the FRED API in general, you must first obtain a FRED API key. Have a look at the Documentation for details.\nThe core function in this package is fredr(), which fetches observations for a FRED series.\nWe can use purrr::map_dfr() to download multiple series at once:\n\n\n\n\nlibrary(fredr)\nimp_cn_raw <- purrr::map_dfr(c(\"XTIMVA01CNM667S\", \"XTIMVA01CNM667N\"), fredr)\n\nA bit of tidying:\n\nimp_cn_tidy <-\n  imp_cn_raw %>%\n  select(time = date, id = series_id, value) %>%\n  mutate(id = recode(\n    id,\n    XTIMVA01CNM667S = \"sa\",\n    XTIMVA01CNM667N = \"nsa\"\n  ))\n\nUse the tsbox package to convert the data frame into ts objects.\n\nlibrary(tsbox)\nimp_cn_sa <- ts_ts(ts_pick(imp_cn_tidy, \"sa\"))\nimp_cn <- ts_ts(ts_pick(imp_cn_tidy, \"nsa\"))\n\nBoth time series are included in the book package.\n\nlibrary(seasonalbook)\nimp_cn_sa\n#>               Jan          Feb          Mar          Apr          May\n#> 1992   3614507593   6488705529   6345008508   6389170996   6462707008\n#> 1993   4030804946   8936422058   7946813101   7769709419   8659493881\n#> 1994   7179652242   8419345128   9055517562   9886744613   9410488773\n#> 1995   7876187238  10346180768  10490909688  11048603584  11140304736\n#> 1996  11824005992  11473606635  11744536380  11204786459  11646843386\n#> 1997  11636726307  11456594635  11528919619  11526756475  11711213842\n#> 1998  10400737771  13413267110  11813967391  11782793164  11696056581\n#> 1999  12151178634  12712618081  13969406252  13588233549  14570090689\n#> 2000  18510369442  18417360295  17321790126  18303199456  17775512872\n#> 2001  17727800659  25500875511  20419777585  20711988490  19876232374\n#> 2002  21258991786  21629995447  22350503959  23415768124  23477544081\n#> 2003  34351882411  31455690936  31847930986  31292912246  33311174720\n#> 2004  40025025830  53250636911  43207570075  44592887492  46281788569\n#> 2005  50077096949  50553318552  51467854302  53121036930  52334360594\n#> 2006  60273660142  64679555153  62802160130  63293959146  62090698818\n#> 2007  73434945600  72589523675  74256318338  76408134653  73197180040\n#> 2008  92620277814  93809448018  95036109917  96549021061 103156844407\n#> 2009  53467375150  73779393199  68921086535  75251800000  78297120135\n#> 2010 100924619000 106534920772 110587540201 112898089056 114308877502\n#> 2011 150171107416 127744280253 140432286759 140646544752 142779749338\n#> 2012 122491896924 172784753438 153175561890 141160117387 157729430540\n#> 2013 154448857386 154942177565 181998365939 161826444391 159618671859\n#> 2014 171171717485 172293373506 164385118733 165088435757 162624688943\n#> 2015 142809057483 138706608319 141228176724 140377719681 138337624843\n#> 2016 117101946375 115188928801 127106502811 129851931590 133328425747\n#> 2017 132579708413 166211891892 151913604520 149642602615 147815978602\n#> 2018 174119985769 175708666385 178120095450 178897626406 185481353363\n#> 2019 172841516005 168528352778 169558915994 183919075770 170882068416\n#> 2020 151673089857 176675758563 162392605233 157442401182 150367067505\n#> 2021 206280802749 212181828570 218845457524 224960034223 228787824443\n#> 2022 250630909637 235480176376 219184413216 229816062337 231044008287\n#>               Jun          Jul          Aug          Sep          Oct\n#> 1992   6822624015   6240268339   6889735216   7025186689   7521605664\n#> 1993   7435499885   8915812028   9167714758   9781896151   9399004753\n#> 1994   9962861249  10012846802  10132352064   9459821027  10198913150\n#> 1995  11117422722  11467136485  11607914027  11869258278  11514149502\n#> 1996  11534673105  10989620711  11424852395  10853757378  11373258986\n#> 1997  11513397832  12272020065  11703746581  11623387250  12734212225\n#> 1998  11580588993  11408685375  11398957545  11361522808  11804527273\n#> 1999  13924632301  13586913479  13539482283  14456692007  14470620057\n#> 2000  19245375552  19353061587  19787941094  19443781205  19903891491\n#> 2001  20802091451  20132711584  20717915154  20424740990  19862721170\n#> 2002  23498199078  25111387141  26089393399  26834524106  26850379570\n#> 2003  32315479025  34052725971  34601124664  36541997764  37440298188\n#> 2004  47430928911  47101992591  46207750312  44867470383  50578746078\n#> 2005  54384390675  54423870807  55519032110  55794861841  62251886665\n#> 2006  64919662117  65029582374  68243131425  70335557492  70101872244\n#> 2007  76488190964  79592896834  81171790026  84049398169  86258666142\n#> 2008 100398372689 103309539629 104825178967  98063799552 100091985709\n#> 2009  85538823167  88729557440  88342151963  95691529476  95805686124\n#> 2010 115834044303 113982387201 118226869364 120027815078 122606627073\n#> 2011 140946641472 146960469567 151628267799 145150721460 155881126158\n#> 2012 155359465404 151465334285 148680290665 154454249361 150256620465\n#> 2013 158250889448 162931536288 162894389391 160737107147 159185409004\n#> 2014 161491114896 159544544348 162508897033 167498420935 164071586366\n#> 2015 144424603094 144583807127 139095090169 134328621120 135738355026\n#> 2016 130796776655 132785333435 134382729090 131416801137 136429498351\n#> 2017 152913125032 148222535343 151680924305 159227232838 156614943532\n#> 2018 180007302059 185530505224 181324023213 185942494886 183571829955\n#> 2019 171105197694 171946720138 174536436980 167597998946 171514766379\n#> 2020 167312289020 170809663952 174783282341 186629444919 184147289061\n#> 2021 227866035510 225175999528 225434411870 220173805924 227393781028\n#> 2022 227414721466 235230087561 220710127999 221555909956 226049013114\n#>               Nov          Dec\n#> 1992   7775815636   7514385952\n#> 1993   9475592143  10231904856\n#> 1994  10177137326  10552115999\n#> 1995  11751061486  11487832189\n#> 1996  11422870060  12649927628\n#> 1997  12047582657  12349948194\n#> 1998  11899098453  12116553250\n#> 1999  15861459121  12904230855\n#> 2000  20397780260  17947163074\n#> 2001  19947058520  19961720196\n#> 2002  28425469098  26088943480\n#> 2003  37518261411  38487963166\n#> 2004  49150458339  48491470665\n#> 2005  59362827407  61040817967\n#> 2006  70353049064  71271469403\n#> 2007  88707847574  89306083301\n#> 2008  76841095411  66579654810\n#> 2009  95564926633 103016361689\n#> 2010 128052015841 128668252022\n#> 2011 154522048184 145735308884\n#> 2012 152717615249 156024299311\n#> 2013 163202100301 163496901106\n#> 2014 154644247999 154028446137\n#> 2015 136009396733 141913513873\n#> 2016 139475577973 150621203538\n#> 2017 165487869556 164730255746\n#> 2018 171736489317 155211106115\n#> 2019 176364422553 179919378896\n#> 2020 184276857808 192224585624\n#> 2021 234501802370 232417609799\n#> 2022 209473658476\nimp_cn\n#>               Jan          Feb          Mar          Apr          May\n#> 1992   3016000000   4851000000   5893000000   6084000000   6358000000\n#> 1993   3204000000   6473000000   7582000000   7481000000   8509000000\n#> 1994   5716000000   5963000000   8725000000   9407000000   9445000000\n#> 1995   6500000000   7123000000  10241000000  10278000000  11493000000\n#> 1996  10107000000   8111000000  11121000000  10898000000  11998000000\n#> 1997   9987000000   7714000000  11110000000  11220000000  11742000000\n#> 1998   8695000000   9101000000  11775000000  11654000000  11239000000\n#> 1999   9893000000   8713000000  14368000000  13824000000  13651000000\n#> 2000  15258000000  13428000000  17806000000  18355000000  16966000000\n#> 2001  15545000000  18226000000  20773000000  21859000000  18809000000\n#> 2002  18970000000  15918000000  22486000000  25753000000  22435000000\n#> 2003  31016000000  23780000000  32549000000  34601000000  31604000000\n#> 2004  35710000000  42020000000  46480000000  49530000000  42980000000\n#> 2005  44260000000  39900000000  55210000000  57660000000  49400000000\n#> 2006  55497000000  51684000000  66857000000  66491000000  60110000000\n#> 2007  70726000000  58358000000  76686000000  80760000000  71644000000\n#> 2008  90230000000  79130000000  95800000000 102390000000 100770000000\n#> 2009  51375000000  60058000000  71886000000  78987000000  75689000000\n#> 2010  95517000000  87110000000 119465000000 118434000000 112213000000\n#> 2011 144591000000 104270000000 152310000000 144370000000 144120000000\n#> 2012 122813000000 146394000000 160395000000 144581000000 162863000000\n#> 2013 159156000000 124450000000 183059000000 168619000000 162160000000\n#> 2014 175138000000 136846000000 162257000000 169980000000 159537000000\n#> 2015 140561000000 108485000000 141719000000 142701000000 131646000000\n#> 2016 112591000000  93633000000 130313000000 126998000000 130996000000\n#> 2017 131890000000 129500000000 156380000000 141490000000 149230000000\n#> 2018 180142000000 137630000000 179100000000 171650000000 187950000000\n#> 2019 179670000000 132371000000 166867000000 180532000000 172773000000\n#> 2020 156921000000 142372000000 164603000000 154547000000 144811000000\n#> 2021 201975000000 169378000000 228992000000 222619000000 220394000000\n#> 2022 244362000000 189280000000 230496000000 222953000000 228195000000\n#>               Jun          Jul          Aug          Sep          Oct\n#> 1992   6820000000   6273000000   6370000000   6842000000   7099000000\n#> 1993   7385000000   8764000000   8757000000   9554000000   8638000000\n#> 1994   9857000000   9621000000  10035000000   9214000000   9408000000\n#> 1995  10955000000  11126000000  11580000000  11292000000  10971000000\n#> 1996  10909000000  11306000000  11136000000  10294000000  11306000000\n#> 1997  11254000000  12786000000  11067000000  11472000000  12835000000\n#> 1998  11840000000  11929000000  10848000000  11522000000  11666000000\n#> 1999  14517000000  13913000000  13443000000  15260000000  13788000000\n#> 2000  20300000000  19490000000  20785000000  20713000000  18943000000\n#> 2001  21252000000  20957000000  22162000000  21851000000  18902000000\n#> 2002  23094000000  26988000000  27206000000  29794000000  25197000000\n#> 2003  32336000000  36514000000  34621000000  41652000000  35193000000\n#> 2004  48890000000  48980000000  46820000000  50720000000  45440000000\n#> 2005  56210000000  54900000000  57780000000  62570000000  56050000000\n#> 2006  66808000000  65714000000  71970000000  76342000000  64298000000\n#> 2007  76469000000  83347000000  86224000000  88263000000  80547000000\n#> 2008 100470000000 111412000000 105999000000 106792000000  92748000000\n#> 2009  87540000000  95150000000  88243000000 103199000000  86848000000\n#> 2010 117153000000 116888000000 119475000000 128356000000 109107000000\n#> 2011 139700000000 145020000000 155390000000 154990000000 140230000000\n#> 2012 148199000000 151629000000 151467000000 158696000000 143448000000\n#> 2013 146979000000 168160000000 162321000000 170556000000 154341000000\n#> 2014 155223841100 165590000000 158629387300 182635508000 161461228100\n#> 2015 144347000000 151292000000 136473000000 145317000000 130903000000\n#> 2016 131447000000 132051000000 138601000000 142503000000 128420000000\n#> 2017 153560000000 146690000000 157090000000 169570000000 150810000000\n#> 2018 175113000000 187516000000 189440000000 195000000000 182375000000\n#> 2019 162817000000 177758000000 180157000000 179137000000 170671000000\n#> 2020 168167000000 176530000000 177272000000 203269000000 178908000000\n#> 2021 230865000000 226439000000 234726000000 237162000000 214714000000\n#> 2022 231187000000 230584000000 234984000000 237800000000 213228000000\n#>               Nov          Dec\n#> 1992   7635000000  13343000000\n#> 1993   9526000000  18086000000\n#> 1994  10307000000  17916000000\n#> 1995  12045000000  18480000000\n#> 1996  11617000000  20032000000\n#> 1997  12091000000  19093000000\n#> 1998  12358000000  17610000000\n#> 1999  16907000000  17422000000\n#> 2000  21641000000  21414000000\n#> 2001  20846000000  22390000000\n#> 2002  28735000000  28734000000\n#> 2003  36893000000  42336000000\n#> 2004  50970000000  52680000000\n#> 2005  61660000000  64380000000\n#> 2006  72926000000  73097000000\n#> 2007  91203000000  91723000000\n#> 2008  74657000000  72046000000\n#> 2009  94691000000 112349000000\n#> 2010 130970000000 141466000000\n#> 2011 159770000000 158020000000\n#> 2012 159776000000 167805000000\n#> 2013 168390000000 182165000000\n#> 2014 156966500000 177900668700\n#> 2015 142616000000 163506000000\n#> 2016 149317000000 168595000000\n#> 2017 177170000000 177112000000\n#> 2018 182670000000 164190000000\n#> 2019 184266000000 191390000000\n#> 2020 192663000000 205898000000\n#> 2021 253012000000 246454000000\n#> 2022 226253000000\n\n\n\nseasonal includes the genhol() function, a R version of the equally named software utility by the U.S. Census Bureau. Using the dates of the Chinese New Year as an input, it produces a time series with the deviations from the monthly means. Here we are assuming that the holiday starts on New Year’s Eve and lasts for one week.\n\nreg_cny <- genhol(cny, start = -1, end = 6, center = \"calendar\")\ntsbox::ts_dygraphs(reg_cny)\n\n\n\n\n\n\n\n8.3.2 Including user-defined regressors\nThe time series reg_cny can be included in the main seasonal adjustment. The automated procedures of X-13ARIMA-SEATS can be applied to the imp series in the following way:\n\nm1 <- seas(\n  imp_cn,\n  xreg = reg_cny,\n  regression.usertype = \"holiday\",\n  x11 = list()\n)\nsummary(m1)\n#> \n#> Call:\n#> seas(x = imp_cn, xreg = reg_cny, regression.usertype = \"holiday\", \n#>     x11 = list())\n#> \n#> Coefficients:\n#>                     Estimate Std. Error z value Pr(>|z|)    \n#> xreg              -0.1765307  0.0126609 -13.943  < 2e-16 ***\n#> Weekday            0.0074007  0.0009128   8.108 5.16e-16 ***\n#> AO1999.Dec        -0.2067229  0.0505932  -4.086 4.39e-05 ***\n#> LS2008.Nov        -0.3893238  0.0529569  -7.352 1.96e-13 ***\n#> MA-Nonseasonal-01  0.4519761  0.0471994   9.576  < 2e-16 ***\n#> MA-Seasonal-12     0.3140128  0.0486579   6.453 1.09e-10 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> X11 adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 371  Transform: log\n#> AICc: 1.688e+04, BIC: 1.691e+04  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 26.19   Shapiro (normality): 0.9706 ***\nplot(m1)\n\n\n\n\nWith xreg, arbitrary user-defined regressors can be included, regression.usertype = “holiday” ensures that the final series does not include the regression effect. We also have chosen X11 as the decomposition method.\nUnsurprisingly, the summary reveals a highly significant Chinese New Year effect. As the automatic model has been estimated on the logarithmic series, the coefficient of -0.17 indicates that New Year in 2023 will lower imports in January, by approximately 0.74 * 17 ~ 13% (compared to average January), and increase it by the same amount in February. The automatic procedure has also detected weekday effects and a level shift during the financial crisis.\n\n\n8.3.3 Multiple regressors\nWe can do even better by using more than one user-defined regressors, one for the pre-New-Year period and one for the post-New-Year period:\n\npre_cny <- genhol(cny, start = -6, end = -1, frequency = 12, center = \"calendar\")\npost_cny <- genhol(cny, start = 0, end = 6, frequency = 12, center = \"calendar\")\nm2 <- seas(\n  imp_cn,\n  xreg = ts_c(pre_cny, post_cny),\n  regression.usertype = \"holiday\",\n  x11 = list()\n)\nsummary(m2)\n#> \n#> Call:\n#> seas(x = imp_cn, xreg = ts_c(pre_cny, post_cny), regression.usertype = \"holiday\", \n#>     x11 = list())\n#> \n#> Coefficients:\n#>                     Estimate Std. Error z value Pr(>|z|)    \n#> xreg1              0.0086369  0.0151880   0.569     0.57    \n#> xreg2             -0.1867300  0.0185745 -10.053  < 2e-16 ***\n#> Weekday            0.0073883  0.0009075   8.141 3.91e-16 ***\n#> AO1999.Dec        -0.2067477  0.0503232  -4.108 3.98e-05 ***\n#> LS2008.Nov        -0.3883634  0.0528389  -7.350 1.98e-13 ***\n#> MA-Nonseasonal-01  0.4485043  0.0472357   9.495  < 2e-16 ***\n#> MA-Seasonal-12     0.3132536  0.0486452   6.440 1.20e-10 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> X11 adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 371  Transform: log\n#> AICc: 1.688e+04, BIC: 1.691e+04  QS (no seasonality in final):0.00202  \n#> Box-Ljung (no autocorr.): 27.47   Shapiro (normality): 0.969 ***\nplot(m2)\n\n\n\n\n\n\n8.3.4 Compare with official adjustments\nI haven’t done any research on how the officially seasonally adjusted rates are computed, but they seem very close to a default call to seas(). Our models (both m1, but especially m2), does a much better job of adjusting to Chinese New Year.\n\nts_dygraphs(\n  ts_c(\n    cny = ts_span(reg_cny * 1e11 + 1e11, start = 2000, end = 2024),\n    ts_pick(imp_cn_2000, \"sa\"),\n    final(seas(x = imp_cn, x11 = \"\")),\n    final(m2)\n  )\n)"
  },
  {
    "objectID": "32-trading-days.html#replicate-x-13-trading-days-adjustment",
    "href": "32-trading-days.html#replicate-x-13-trading-days-adjustment",
    "title": "9  Trading days",
    "section": "9.1 Replicate X-13 trading days adjustment",
    "text": "9.1 Replicate X-13 trading days adjustment\nReplication is possible. Adding the regressors to seasonal may be useful.\n\nsuppressPackageStartupMessages(library(tidyverse))\nlibrary(tsbox)\nlibrary(seasonal)"
  },
  {
    "objectID": "32-trading-days.html#examples",
    "href": "32-trading-days.html#examples",
    "title": "9  Trading days",
    "section": "9.2 Examples",
    "text": "9.2 Examples\n\n9.2.1 Constructing weekday regressors\n\ndates <- seq(as.Date(\"1931-01-01\"), as.Date(\"2030-12-31\"), by = \"day\")\n\nfirst_of_month <- function(x) {\n  as.Date(paste(\n    data.table::year(dates),\n    data.table::month(dates),\n    1,\n    sep = \"-\"\n  ))\n}\n\n\ntd1nolpyear\n\nInclude the weekday-weekend contrast variable (monthly and quarterly flow eries only): (no. of weekdays) −(5/2) (no. of Saturdays and Sundays).\n\ntdnolpyear\n\nInclude the six day-of-week contrast variables (monthly and quarterly flow series only): (no. of Mondays) − (no. of Sundays), . . . , (no. of Saturdays) − (no. of Sundays).\n\n\n\ntd_m_tbl <-\n  tibble(dates, wd = as.POSIXlt(dates)$wday, name = weekdays(dates)) %>%\n  group_by(time = first_of_month(dates)) %>%\n  summarize(\n    td1 = sum(wd %in% 1:5) - 5 / 2 * sum(wd %in% c(6, 0)),\n    mon = sum(wd == 1) - sum(wd == 0),\n    tue = sum(wd == 2) - sum(wd == 0),\n    wed = sum(wd == 3) - sum(wd == 0),\n    thu = sum(wd == 4) - sum(wd == 0),\n    fri = sum(wd == 5) - sum(wd == 0),\n    sat = sum(wd == 6) - sum(wd == 0)\n  )\n\ntd_m_tbl\n#> \u001b[90m# A tibble: 1,200 × 8\u001b[39m\n#>   \u001b[1mtime\u001b[22m         \u001b[1mtd1\u001b[22m   \u001b[1mmon\u001b[22m   \u001b[1mtue\u001b[22m   \u001b[1mwed\u001b[22m   \u001b[1mthu\u001b[22m   \u001b[1mfri\u001b[22m   \u001b[1msat\u001b[22m\n#>   \u001b[3m\u001b[90m<date>\u001b[39m\u001b[23m     \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m\n#> \u001b[90m1\u001b[39m 1931-01-01  -\u001b[31m0\u001b[39m\u001b[31m.\u001b[39m\u001b[31m5\u001b[39m     0     0     0     1     1     1\n#> \u001b[90m2\u001b[39m 1931-02-01   0       0     0     0     0     0     0\n#> \u001b[90m3\u001b[39m 1931-03-01  -\u001b[31m0\u001b[39m\u001b[31m.\u001b[39m\u001b[31m5\u001b[39m     0     0    -\u001b[31m1\u001b[39m    -\u001b[31m1\u001b[39m    -\u001b[31m1\u001b[39m    -\u001b[31m1\u001b[39m\n#> \u001b[90m4\u001b[39m 1931-04-01   2       0     0     1     1     0     0\n#> \u001b[90m5\u001b[39m 1931-05-01  -\u001b[31m4\u001b[39m      -\u001b[31m1\u001b[39m    -\u001b[31m1\u001b[39m    -\u001b[31m1\u001b[39m    -\u001b[31m1\u001b[39m     0     0\n#> \u001b[90m6\u001b[39m 1931-06-01   2       1     1     0     0     0     0\n#> \u001b[90m# … with 1,194 more rows\u001b[39m\n\n‘Trading day adjustment’ removes the effect of the weekdays, and but does not include holidays, such as Christmas or Easter. These are handled separately (Easter) or dealt with by standard seasonal adjustment (Christmas).\n\ntd1nolpyear <-\n  td_m_tbl %>%\n  select(time, value = td1) %>%\n  ts_ts()\n\ntdnolpyear <-\n  td_m_tbl %>%\n  select(-td1) %>%\n  ts_long() %>%\n  ts_ts()\n\n\n\n9.2.2 Single coef\n\nm1 <- seas(\n  AirPassengers,\n  xreg = td1nolpyear,\n  regression.aictest = NULL,\n  outlier = NULL,\n  regression.usertype = \"td\"\n)\nsummary(m1)\n#> \n#> Call:\n#> seas(x = AirPassengers, xreg = td1nolpyear, regression.aictest = NULL, \n#>     outlier = NULL, regression.usertype = \"td\")\n#> \n#> Coefficients:\n#>                     Estimate Std. Error z value Pr(>|z|)    \n#> xreg              -0.0025474  0.0006732  -3.784 0.000154 ***\n#> MA-Nonseasonal-01  0.3292278  0.0813633   4.046 5.20e-05 ***\n#> MA-Seasonal-12     0.5695911  0.0739360   7.704 1.32e-14 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 144  Transform: log\n#> AICc: 976.6, BIC: 987.7  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 24.86   Shapiro (normality): 0.9805 *\n\n\nm2 <- seas(\n  AirPassengers,\n  regression.aictest = NULL,\n  outlier = NULL,\n  regression.variables = c(\"td1nolpyear\", outlier = NULL)\n)\nsummary(m2)\n#> \n#> Call:\n#> seas(x = AirPassengers, regression.aictest = NULL, outlier = NULL, \n#>     regression.variables = c(\"td1nolpyear\", outlier = NULL))\n#> \n#> Coefficients:\n#>                     Estimate Std. Error z value Pr(>|z|)    \n#> Weekday           -0.0025474  0.0006732  -3.784 0.000154 ***\n#> MA-Nonseasonal-01  0.3292278  0.0813633   4.046 5.20e-05 ***\n#> MA-Seasonal-12     0.5695911  0.0739360   7.704 1.32e-14 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 144  Transform: log\n#> AICc: 976.6, BIC: 987.7  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 24.86   Shapiro (normality): 0.9805 *\n\n\n\n9.2.3 All coefs\n\nm3 <- seas(\n  AirPassengers,\n  xreg = tdnolpyear,\n  regression.aictest = NULL,\n  outlier = NULL,\n  regression.usertype = \"td\"\n)\nsummary(m3)\n#> \n#> Call:\n#> seas(x = AirPassengers, xreg = tdnolpyear, regression.aictest = NULL, \n#>     outlier = NULL, regression.usertype = \"td\")\n#> \n#> Coefficients:\n#>                    Estimate Std. Error z value Pr(>|z|)    \n#> xreg1             -0.004982   0.004731  -1.053 0.292359    \n#> xreg2             -0.004589   0.004762  -0.964 0.335172    \n#> xreg3             -0.001612   0.004745  -0.340 0.734094    \n#> xreg4             -0.003817   0.004680  -0.816 0.414652    \n#> xreg5              0.003958   0.004706   0.841 0.400272    \n#> xreg6              0.003164   0.004829   0.655 0.512342    \n#> MA-Nonseasonal-01  0.298942   0.082193   3.637 0.000276 ***\n#> MA-Seasonal-12     0.579965   0.073855   7.853 4.07e-15 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 144  Transform: log\n#> AICc: 983.9, BIC:  1008  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 29.43   Shapiro (normality): 0.9781 *\n\n\nm4 <- seas(\n  AirPassengers,\n  regression.aictest = NULL,\n  outlier = NULL,\n  regression.variables = c(\"tdnolpyear\", outlier = NULL)\n)\nsummary(m4)\n#> \n#> Call:\n#> seas(x = AirPassengers, regression.aictest = NULL, outlier = NULL, \n#>     regression.variables = c(\"tdnolpyear\", outlier = NULL))\n#> \n#> Coefficients:\n#>                    Estimate Std. Error z value Pr(>|z|)    \n#> Mon               -0.004982   0.004731  -1.053 0.292359    \n#> Tue               -0.004589   0.004762  -0.964 0.335172    \n#> Wed               -0.001612   0.004745  -0.340 0.734094    \n#> Thu               -0.003817   0.004680  -0.816 0.414652    \n#> Fri                0.003958   0.004706   0.841 0.400272    \n#> Sat                0.003164   0.004829   0.655 0.512342    \n#> MA-Nonseasonal-01  0.298942   0.082193   3.637 0.000276 ***\n#> MA-Seasonal-12     0.579965   0.073855   7.853 4.07e-15 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> SEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 144  Transform: log\n#> AICc: 983.9, BIC:  1008  QS (no seasonality in final):    0  \n#> Box-Ljung (no autocorr.): 29.43   Shapiro (normality): 0.9781 *"
  },
  {
    "objectID": "33-outliers.html",
    "href": "33-outliers.html",
    "title": "10  Outliers",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\n\nWhy care about outliers?\nAdditive outliers, level shifts, temporary changes"
  },
  {
    "objectID": "34-seasonal-breaks.html",
    "href": "34-seasonal-breaks.html",
    "title": "11  Seasonal breaks",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\n\nWhy to care about seasonal breaks?\nDetection of seasonal breaks\nCorrection for seasonal breaks"
  },
  {
    "objectID": "40-part-other-issues.html",
    "href": "40-part-other-issues.html",
    "title": "Other Issues",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\nPart IV investigates more holistic issues that practitioners face. The main focus is to give classical methodology to answer their problems. Since these types of issues can be highly specialized, we concentrate on known solutions to the topics."
  },
  {
    "objectID": "41-presence-of-seasonality.html",
    "href": "41-presence-of-seasonality.html",
    "title": "12  Presence of seasonality",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\nShould a series be seasonally adjusted at all?\nX-13AS removes seasonality from series, even if a series is not seasonal from the beginneing. If a series is not seasonal, the resulting series may be bad.\nFortunatly, X-13 contains a few tests that help users to decide if a series is is seasnal or not.\nBefore appying X-13AS ist may be necessary to descide if the series is seasonal.\n\n12.0.1 Avalabele Tests\nX13 offers has several formal checks:\n\nqs test\nids\nm7\n\nThe ids test is closely connected to m7, but the QS test is quite different. Which tests are preferrable, and how should a user descide if the tests are not aligned?\n\n\n12.0.2 ids test\nhttp://www.ons.gov.uk/ons/guide-method/method-quality/general-methodology/time-series-analysis/guide-to-seasonal-adjustment.pdf\n\nFrom ONS 18.2 A general criterion for existence of seasonality\nEmpirical research showed that the most appropriate test for seasonality is the “Combined test for the presence of identifiable seasonality”, given after table D8 of the output. In particular, one of the following statements will always appear:\n\nIDENTIFIABLE SEASONALITY PRESENT\nIDENTIFIABLE SEASONALITY PROBABLY NOT PRESEN\nIDENTIFIABLE SEASONALITY NOT PRESENT\n\nIt is recommended that a series is adjusted in the first two cases and not adjusted in the last one. However there are two cases where one might need to deviate from this practice:\n\nThis is the ids test shown below\n\n\n12.0.3 Case Study"
  },
  {
    "objectID": "42-annual-constraining.html",
    "href": "42-annual-constraining.html",
    "title": "13  Annual constraining",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\n\nShould the annual values be restrained?\nHow to use the force spec"
  },
  {
    "objectID": "43-indirect-vs-direct.html",
    "href": "43-indirect-vs-direct.html",
    "title": "14  Indirect vs direct adjustment",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\n\nShould the subcomponents of a series be adjusted separately?"
  },
  {
    "objectID": "50-part-quality-assessment.html",
    "href": "50-part-quality-assessment.html",
    "title": "Quality assessment",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\nThis section focuses on diagnostic tools for seasonal adjustment. This will be written as a stand-alone section as well as a continuance of prior sections. The idea here is that many readers may be interested in checking the quality of their adjustments but not need help performing it."
  },
  {
    "objectID": "51-quality-measures.html",
    "href": "51-quality-measures.html",
    "title": "15  Quality measures",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\n\nWhat is a good seasonal adjustment?\nM statistics\nOther statistics available in X13"
  },
  {
    "objectID": "52-revisions.html",
    "href": "52-revisions.html",
    "title": "16  Revisions",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\n\nHow to measure revisions?\nShould a model be re-estimated each period?\nHow to use the slidingspan and history spec"
  },
  {
    "objectID": "60-part-future.html",
    "href": "60-part-future.html",
    "title": "The future of seasonal adjustment",
    "section": "",
    "text": "You are reading an early draft of Seasonal Adjustment in R. This chapter is currently a dumping ground for ideas, and we don’t recommend reading it.\n\n\n\n\nThis short section outlines the future projects in the seasonal adjustment field. Daily or multiple seasonal adjustment plays a major role here. Ideally, examples of how to solve these problems are given.\n\nDaily adjustment\nMultivariate seasonal adjustment\nOther methods"
  },
  {
    "objectID": "99-status.html",
    "href": "99-status.html",
    "title": "Status of the book",
    "section": "",
    "text": "Current status of sections \n\n\n\n\n\n\n\nsection name\nstatus\ndue date\n\n\n\n\nA minimal example\ncourse_complete\n2022-12-21\n\n\nOverview of the software\ncourse_complete\n2022-12-21\n\n\nTransform\ncourse_complete\n2022-12-21\n\n\nregARIMA Model\npolishing\n2022-12-21\n\n\nHolidays\ndrafting\n2023-01-21\n\n\nSEATS\ndrafting\n2023-01-21\n\n\nX11\ndrafting\n2023-01-21"
  }
]