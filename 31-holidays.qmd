# Irregular holidays {#sec-holidays}

```{r}
#| results: "asis"
#| echo: false
source("_common.R")
status("polishing", "2023-03-24", section = "Holidays")  # drafting, polishing, complete
```

```{=html}
<!--

Jim

- Look into Ramadan Adjustment in one of their series

 -->
```
```{r, echo=FALSE, include = FALSE}
library(tidyverse, quietly = TRUE)
library(tsbox, quietly = TRUE)
```

```{=html}
<!--
-   Why should we adjust for holiday effects

-   Easter adjustment

-   User defined adjustments (Chinese New Year, Diwali)

-   Case Study: How to adjust for Ramadan (which is connected with some additional challenges)

 -->
```
Many time series are affected by public holidays.
For example, retail sales typically increase before Christmas, and are much lower during Christmas days.
Similar effects occur for Chinese New Year, Ramadan, Diwali or Easter.
In seasonal adjustment, the treatment of Christmas is usually not much of a problem because Christmas always occurs on the same date in December.
Thus, the Christmas effect is simply part of the December effect (or of the fourth quarter effect, if you have a quarterly series).

Things are more complicated with irregular holidays.
Because their occurrence follows different rules, the holiday happens at different months in different years.
Easter, for example, is based on the lunar cycles of the Jewish calendar, and is sometimes in March and sometimes in April.
In quarterly data, Easter falls either in the first or in the second quarter.

For the interpretation of many time series, this constitutes a problem.
Retails sales, for example, are usually reduced during the Easter holiday.
If March values are compared between years, their interpretation depends on the exact day of Easter.
If Easter falls into March, we would expect lower retail sales in this month.
Conversely, if it falls into April, we would expect April numbers to be lower.

| Variable    | Description|
|-------------------------------|----------------------------------------|
| `easter[w]` | Easter holiday regression variable for monthly or quarterly flow data that assumes the level of daily activity changes on the `w`-th day before Easter and remains at the new level through the day before Easter. This value w must be supplied and can range from 1 to 25. A user can also specify an `easter[0]` regression variable, which assumes the daily level of activity level changes only on Easter Sunday. To estimate complex effects, several of these variables, differing in their choices of `w`, can be specified. |
| `labor[w]`  | Labor Day holiday regression variable (monthly flow data only) that assumes the level of daily activity changes on the `w`-th day before Labor Day and remains at the new level until the day before Labor Day. The value `w` must be supplied and can range from 1 to 25.                                                                                                                                                                                                                                                            |
| `thank[w]`  | Thanksgiving holiday regression variable (monthly flow data only) that assumes the level of daily activity changes on the `w`-th day before or after Thanksgiving and remains at the new level until December 24. The value w must be supplied and can range from âˆ’8 to 17. Values of `w < 0` indicate a number of days after Thanksgiving; values of `w > 0` indicate a number of days before Thanksgiving.                                                                                                                          |

: Values for `regression.variables` that are relevant for holiday adjustment {#tbl-regression-arguments tbl-colwidths="\[20,80\]"}

## Automated Adjustment

By default, `seas()` calls the automated routines to detect Easter effects in a series.
For example, the default call detects an Easter effect with a length of one in the air passengers time series:

```{r}
m <- seas(AirPassengers)
summary(m)
```

X-13 tests various lengths of an Easter effect and picks the one model with the lowest AICc.
`Easter[1`\] indicates that a length of one day has been chosen.
I.e., the Easter holiday period is thought to start on Easter day and last for only one day.
Alternatively, `Easter[8`\] starts at Easter day and lasts for the eight subsequent days.
If we want to enforce an eight-day Easter holiday, we can specify the call as follows:

```{r}
m_easter_8 <- seas(AirPassengers, regression.variables = "easter[8]")
summary(m_easter_8)
```

Surprisingly, the 8-day Easter model has a lower AICc than the one-day model.
This opens the question of why the one-day model has been chosen in the beginning.

Including holiday effects can have a dramatic effect on a final seasonal adjustment.
Consider the monthly retail sales from Hobby, toy, and game stores.
The data can be found at the [US Census Time Series repository](https://www.census.gov/econ/currentdata/?programCode=MARTS&startYear=1992&endYear=2023&categories%5B%5D=44X72&dataType=SM&geoLevel=US&adjusted=1&notAdjusted=1&errorData=0).

::: callout-note
### How to read data from CENSUS into R

```{r }
#| eval = FALSE
get_census_time_series <- function(url) {
  tf <- tempfile(fileext = ".txt")
  download.file(census_url, tf)
  ans <- readr::read_csv(tf, skip = 6, col_types = cols(
    Period = col_character(),
    Value = col_double()
  ))

  ans |>
    mutate(
      month.abb = gsub("\\-.+$", "", Period),
      year = gsub("^.+\\-", "", Period)
    ) |>
    left_join(tibble(month.abb, month = seq(month.abb)), by = join_by(month.abb)) |>
    mutate(time = as.Date(paste(year, month, 1, sep = "-"))) |>
    select(time, value = Value) |>
    filter(!is.na(value)) |>
    tsbox::ts_ts()
}

census_url <- "https://www.census.gov/econ_export/?format=csv&adjusted=true&notAdjusted=false&errorData=false&mode=report&default=&errormode=Dep&charttype=&chartmode=&chartadjn=&submit=GET+DATA&program=MARTS&startYear=1992&endYear=2023&categories%5B0%5D=44X72&dataType=SM&geoLevel=US"

get_census_time_series(census_url)
```
:::

```{r, echo=FALSE}
hobby_toy_game <-
structure(c(620L, 585L, 643L, 706L, 660L, 721L, 678L, 653L, 638L,
789L, 1332L, 3226L, 598L, 576L, 683L, 735L, 685L, 722L, 745L,
682L, 671L, 799L, 1480L, 3275L, 618L, 637L, 819L, 782L, 742L,
758L, 778L, 801L, 806L, 987L, 1677L, 3445L, 683L, 665L, 823L,
867L, 821L, 873L, 851L, 846L, 846L, 993L, 1830L, 3616L, 705L,
737L, 890L, 862L, 669L, 849L, 877L, 874L, 870L, 1094L, 2002L,
4073L, 730L, 791L, 1032L, 896L, 947L, 940L, 963L, 958L, 971L,
1141L, 2009L, 3643L, 858L, 883L, 987L, 1022L, 986L, 1016L, 1042L,
1025L, 1005L, 1197L, 2011L, 3801L, 933L, 966L, 1135L, 1076L,
1061L, 1101L, 1083L, 1101L, 1111L, 1277L, 2096L, 3711L, 893L,
1002L, 1106L, 1136L, 1072L, 1098L, 1124L, 1132L, 1175L, 1285L,
2161L, 3763L, 880L, 971L, 1176L, 1063L, 1038L, 1107L, 1094L,
1065L, 1050L, 1303L, 2445L, 3628L, 896L, 966L, 1186L, 1014L,
1078L, 1065L, 1103L, 1087L, 1048L, 1347L, 2468L, 3651L, 910L,
940L, 1111L, 1139L, 1088L, 1064L, 1094L, 1087L, 1095L, 1286L,
2223L, 3545L, 962L, 1045L, 1125L, 1082L, 974L, 1024L, 1086L,
1016L, 1051L, 1311L, 2187L, 3451L, 950L, 980L, 1173L, 1098L,
1061L, 1049L, 1077L, 1028L, 1019L, 1229L, 2120L, 3471L, 1063L,
1022L, 1117L, 1094L, 1040L, 1048L, 1070L, 1043L, 1086L, 1205L,
1933L, 3299L, 948L, 974L, 1188L, 1064L, 1050L, 1096L, 1102L,
1084L, 1102L, 1275L, 2208L, 3253L, 1043L, 1077L, 1183L, 1080L,
1131L, 1044L, 1097L, 1065L, 1061L, 1218L, 1959L, 3117L, 1031L,
1009L, 1095L, 1086L, 1064L, 1020L, 1058L, 1007L, 1063L, 1194L,
1842L, 2999L, 953L, 1000L, 1155L, 1059L, 1030L, 1024L, 1070L,
1039L, 1074L, 1254L, 1990L, 3064L, 967L, 1023L, 1193L, 1184L,
1065L, 1061L, 1082L, 1067L, 1143L, 1243L, 1951L, 3033L, 1063L,
1182L, 1259L, 1146L, 1175L, 1120L, 1113L, 1117L, 1148L, 1263L,
1929L, 2963L, 1019L, 1068L, 1239L, 1107L, 1116L, 1057L, 1106L,
1145L, 1161L, 1338L, 2134L, 3263L, 1012L, 1084L, 1213L, 1195L,
1170L, 1084L, 1183L, 1185L, 1253L, 1360L, 2140L, 3511L, 1157L,
1190L, 1360L, 1260L, 1274L, 1196L), .Tsp = c(1992, 2015.41666666667,
12), class = "ts")
```

```{r}
ts_plot(hobby_toy_game, title = "Hobby, Toy and Game store monthly sales")
```

We can perform a seasonal adjustment on this series with and without the Easter\[8\] regressor.

```{r}
m0 <- seas(hobby_toy_game, x11 = "", regression = NULL, outlier = NULL)
m1 <- seas(hobby_toy_game, x11 = "", regression.variables = "Easter[8]", outlier = NULL)
ts_dygraphs(
  ts_c(
    hobby_toy_game, SA_noEaster = final(m0), SA_withEaster = final(m1)
  )
)
```

Notice the large differences during certain Easter periods.
For example, the final seasonally adjusted series including an Easter regressor in April 2011 was 1360.52.
The final seasonally adjusted values without an Easter regressor was 1449.3, a difference of 89 million dollars which more than 7.5% higher than the original series value.

## Case Study: Chinese New Year

The Lunar New Year is the most important holiday in China and many other Asian countries.
Traditionally, the holiday starts on Lunar New Year's Eve, and lasts until the Lantern Festival on the 15th day of the first month of the lunisolar calendar.
The Chinese New Year is celebrated either in January or in February of the Gregorian calendar.

Because of its importance, Chinese New Year seriously distorts monthly time series, which are usually reported according to the Gregorian calendar.
Unlike Easter, Chinese New Year does not affect quarterly time series, as it always falls in the first quarter.

X-13-ARIMA-SEATS has a built-in adjustment procedure for the Easter holiday, but not for Chinese New Year.
However, all packages allow for the inclusion of user-defined variables, and the Chinese New Year can be modeled as such.

### Imports of Goods to China

Chinese imports are included as an example series in seasonalbook, both with and without the official seasonal adjustment.

```{r }
library(tsbox)
stopifnot(packageVersion("seasonalbook") >= "0.0.2")
ts_plot(imp_cn)
```

The series has a very different seasonal pattern before 2000, we focus on the later period.
(Adjusting the whole series in one step is possible, but for good results one should manually model the seasonal break.)

```{r }
imp_cn_2000 <- ts_span(imp_cn, start = 2000)
```

`ts_dygraphs()` works similar to `ts_plot()`, but allows for zooming:

```{r }
ts_dygraphs(imp_cn_2000)
```

::: callout-note
### How to read data from FRED into R

*fredr* provides access to the [Federal Reserve of Economic Data](https://fred.stlouisfed.org) (FRED), provided by the Federal Reserve Bank of St. Louis.
To use *fredr* and the FRED API in general, you must first obtain a FRED API key.
Take a look at the [Documentation](https://cran.r-project.org/web/packages/fredr/vignettes/fredr.html) for details.

The core function in this package is `fredr()`, which fetches observations for a FRED series.

We can use `purrr::map_dfr()` to download multiple series at once:

```{r }
#| eval = FALSE
library(fredr)
imp_cn_raw <- purrr::map_dfr(c("XTIMVA01CNM667S", "XTIMVA01CNM667N"), fredr)
```

A bit of tidying:

```{r }
#| eval = FALSE
imp_cn_tidy <-
  imp_cn_raw %>%
  select(time = date, id = series_id, value) %>%
  mutate(id = recode(
    id,
    XTIMVA01CNM667S = "sa",
    XTIMVA01CNM667N = "nsa"
  ))
```

Use the *tsbox* package to convert the data frame into ts objects.

```{r }
#| eval = FALSE
library(tsbox)
imp_cn_sa <- ts_ts(ts_pick(imp_cn_tidy, "sa"))
imp_cn <- ts_ts(ts_pick(imp_cn_tidy, "nsa"))

```

Both time series are included in the book package.

```{r }
#| eval = FALSE
library(seasonalbook)
imp_cn_sa
imp_cn
```
:::

*seasonal* includes the `genhol()` function, a R version of the equally named software utility by the U.S.
Census Bureau.
Using the dates of the Chinese New Year as an input, it produces a time series with the deviations from the monthly means.
Here we are assuming that the holiday starts on New Year's Eve and lasts for one week.

```{r }
reg_cny <- genhol(cny, start = -1, end = 6, center = "calendar")
tsbox::ts_dygraphs(reg_cny)
```

The `center` argument normalizes the series by either subtracting the overall average effect (`"mean"`) or the average for each period (`"calendar"`). You should use `"calendar"` for Easter or Chinese New Year, but `"mean"` for Ramadan. Without this adjustment (`"none"`), the holiday effect is subtracted, altering the annual value of the series.


### Including user-defined regressors

The time series `reg_cny` can be included in the main seasonal adjustment.
The automated procedures of X-13ARIMA-SEATS can be applied to the imp series in the following way:

```{r }
m1 <- seas(
  imp_cn,
  xreg = reg_cny,
  regression.usertype = "holiday",
  x11 = list()
)
summary(m1)
plot(m1)
```

With `xreg`, arbitrary user-defined regressors can be included, `regression.usertype = "holiday"` ensures that the final series does not include the regression effect.
We also have chosen X11 as the decomposition method.

Unsurprisingly, the summary reveals a highly significant Chinese New Year effect.
As the automatic model has been estimated on the logarithmic series, the coefficient of -0.17 indicates that New Year in 2023 will lower imports in January, by approximately 0.74 \* 17 \~ 13% (compared to average January), and increase it by the same amount in February.
The automatic procedure has also detected weekday effects and a level shift during the financial crisis.

### Multiple regressors

We can do even better by using more than one user-defined regressors, one for the pre-New-Year period and one for the post-New-Year period:

```{r }
pre_cny <- genhol(cny, start = -6, end = -1, frequency = 12, center = "calendar")
post_cny <- genhol(cny, start = 0, end = 6, frequency = 12, center = "calendar")
m2 <- seas(
  imp_cn,
  xreg = ts_c(pre_cny, post_cny),
  regression.usertype = "holiday",
  x11 = list()
)
summary(m2)
plot(m2)
```

### Compare with official adjustments

I haven't done any research on how the officially seasonally adjusted rates are computed, but they seem very close to a default call to `seas()`.
Our models (both `m1`, but especially `m2`), does a much better job of adjusting to Chinese New Year.

```{r }
ts_dygraphs(
  ts_c(
    cny = ts_span(reg_cny * 1e11 + 1e11, start = 2000, end = 2024),
    ts_pick(imp_cn_2000, "sa"),
    final(seas(x = imp_cn, x11 = "")),
    final(m2)
  )
)
```



::: callout-note
### Replicate automated Easter adjustment in R

We can use R's `arima()` function and `genhol()` to fully replicate X-13's automated Easter adjustment.

Let's build an Easter regressor, using `genhol()`:

```{r }
# easter regressor
ea <- genhol(easter, start = -1, end = -1, center = "calendar")
ea <- window(ea, start = start(AirPassengers), end = end(AirPassengers))
```

And use this in an ARIMA model in R:

```{r }
arima(
  log(AirPassengers),
  order = c(0,1,1),
  seasonal = c(0,1,1),
  xreg = ea
)
```


Now, let's compare to the results of X-13:

```{r }
m <- seas(
  AirPassengers,
  regression.variables = c("easter[1]"),
  regression.aictest = NULL
)
summary(m)
```
Note that R defines the ARIMA model with negative signs before the MA term, X-13 with a positive sign.

:::



## Case Study: Azerbaijani Retail Sales


```{r }
library(cbar.sa)
library(seasonal)
library(dplyr)

# manual regressor construction
ramadan_ts_manual <-
  islamic_calendar |>
  group_by(y = lubridate::year(date)) |>
  mutate(ramadan_y = sum(ramadan)) |>
  ungroup() |>
  group_by(y = lubridate::year(date), q = lubridate::quarter(date)) |>
  summarize(time = date[1], value = sum(ramadan) / ramadan_y[1], .groups = "drop") |>
  select(time, value) |>
  tsbox::ts_ts()

# Careful, this is not centered!


# ### automatic regressor construction (experimental)

ramadan <-
  islamic_calendar |>
  mutate(diff = ramadan - lag(ramadan)) |>
  mutate(start = (diff == 1)) |>
  dplyr::filter(start) |>
  pull(date)

# Q: Can we come up with a defined start date for Ramadan or Muharrem?
islamic_calendar |>
  filter(date %in% c("2000-11-26", "2000-11-27", "2000-11-28"))

# Q: Is the length of Ramadan uniquely defined?
ramadan_ts_auto <- seasonal::genhol(ramadan, frequency = 4, start = 0, end = 29, center = "none")

# Applying the calendar mean adjustment
ramadan_ts <- seasonal::genhol(ramadan, frequency = 4, start = 0, end = 29, center = "mean")


# Different pattern pre 2008
plot(trade_tur)

m0 <- seas(trade_tur, x11 = "")
m1 <- seas(
  trade_tur,
  xreg = ramadan_ts,
  regression.usertype = "holiday"
)
summary(m0)
summary(m1)  # xreg insignificant


# If we start adjusting from 2008 on, we get a better result
m2 <- seas(trade_tur, x11 = "", series.modelspan = "2008.01,")
m3 <- seas(
  trade_tur,
  xreg = ramadan_ts,
  regression.usertype = "holiday",
  series.modelspan = "2008.01,"
)
summary(m2)
summary(m3)

tsbox::ts_plot(
  delta_perc = (final(m3) - final(m2)) / final(m2)
)


# Applying the calendar mean adjustment
ramadan_pre_ts <- seasonal::genhol(ramadan, frequency = 4, start = -2, end = 0, center = "mean")
library(tsbox)
m4 <- seas(
  trade_tur,
  xreg = cbind(ramadan_pre_ts, ramadan_ts),
  regression.usertype = "holiday",
  series.modelspan = "2008.01,"
)

# Q: Does the sign makes sense?
summary(m4)

```

## Exercises

1. Go through `seasonal::genhol()` documentation and make sure you understand its argument.

1. Can you replicate `seasonal::genhol(easter, frequency = 4, start = -2, center = "calendar")` output manually?

1. Can you explain why do we need to set `center = "mean"` for Ramadan?

1. What is the consequence of not specifying `regression.usertype = "holiday"` in a call to `seas()` when adjusting for moving holidays?
